"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-forcegraph@1.41.14_three@0.167.1";
exports.ids = ["vendor-chunks/three-forcegraph@1.41.14_three@0.167.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/three-forcegraph@1.41.14_three@0.167.1/node_modules/three-forcegraph/dist/three-forcegraph.mjs":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/three-forcegraph@1.41.14_three@0.167.1/node_modules/three-forcegraph/dist/three-forcegraph.mjs ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ threeForcegraph)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/.pnpm/three@0.167.1/node_modules/three/build/three.module.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/simulation.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/link.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/manyBody.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/center.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/radial.js\");\n/* harmony import */ var ngraph_graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ngraph.graph */ \"(ssr)/./node_modules/.pnpm/ngraph.graph@20.0.1/node_modules/ngraph.graph/index.js\");\n/* harmony import */ var ngraph_forcelayout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngraph.forcelayout */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js\");\n/* harmony import */ var kapsule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! kapsule */ \"(ssr)/./node_modules/.pnpm/kapsule@1.14.5/node_modules/kapsule/dist/kapsule.mjs\");\n/* harmony import */ var accessor_fn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! accessor-fn */ \"(ssr)/./node_modules/.pnpm/accessor-fn@1.5.1/node_modules/accessor-fn/dist/accessor-fn.mjs\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/min.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/max.js\");\n/* harmony import */ var data_joint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! data-joint */ \"(ssr)/./node_modules/.pnpm/data-joint@1.3.1/node_modules/data-joint/dist/data-joint.mjs\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-scale */ \"(ssr)/./node_modules/.pnpm/d3-scale@4.0.2/node_modules/d3-scale/src/ordinal.js\");\n/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-scale-chromatic */ \"(ssr)/./node_modules/.pnpm/d3-scale-chromatic@3.1.0/node_modules/d3-scale-chromatic/src/categorical/Paired.js\");\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tinycolor2 */ \"(ssr)/./node_modules/.pnpm/tinycolor2@1.6.0/node_modules/tinycolor2/esm/tinycolor.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _construct(t, e, r) {\n  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && _setPrototypeOf(p, r.prototype), p;\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar materialDispose = function materialDispose(material) {\n  if (material instanceof Array) {\n    material.forEach(materialDispose);\n  } else {\n    if (material.map) {\n      material.map.dispose();\n    }\n    material.dispose();\n  }\n};\nvar deallocate = function deallocate(obj) {\n  if (obj.geometry) {\n    obj.geometry.dispose();\n  }\n  if (obj.material) {\n    materialDispose(obj.material);\n  }\n  if (obj.texture) {\n    obj.texture.dispose();\n  }\n  if (obj.children) {\n    obj.children.forEach(deallocate);\n  }\n};\nvar emptyObject = function emptyObject(obj) {\n  while (obj.children.length) {\n    var childObj = obj.children[0];\n    obj.remove(childObj);\n    deallocate(childObj);\n  }\n};\n\nvar _excluded = [\"objFilter\"];\nfunction threeDigest(data, scene) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$objFilter = _ref.objFilter,\n    objFilter = _ref$objFilter === void 0 ? function () {\n      return true;\n    } : _ref$objFilter,\n    options = _objectWithoutProperties(_ref, _excluded);\n  return (0,data_joint__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(data, scene.children.filter(objFilter), function (obj) {\n    return scene.add(obj);\n  }, function (obj) {\n    scene.remove(obj);\n    emptyObject(obj);\n  }, _objectSpread2({\n    objBindAttr: '__threeObj'\n  }, options));\n}\n\nvar colorStr2Hex = function colorStr2Hex(str) {\n  return isNaN(str) ? parseInt((0,tinycolor2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(str).toHex(), 16) : str;\n};\nvar colorAlpha = function colorAlpha(str) {\n  return isNaN(str) ? (0,tinycolor2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(str).getAlpha() : 1;\n};\nvar autoColorScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n\n// Autoset attribute colorField by colorByAccessor property\n// If an object has already a color, don't set it\n// Objects can be nodes or links\nfunction autoColorObjects(objects, colorByAccessor, colorField) {\n  if (!colorByAccessor || typeof colorField !== 'string') return;\n  objects.filter(function (obj) {\n    return !obj[colorField];\n  }).forEach(function (obj) {\n    obj[colorField] = autoColorScale(colorByAccessor(obj));\n  });\n}\n\nfunction getDagDepths (_ref, idAccessor) {\n  var nodes = _ref.nodes,\n    links = _ref.links;\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$nodeFilter = _ref2.nodeFilter,\n    nodeFilter = _ref2$nodeFilter === void 0 ? function () {\n      return true;\n    } : _ref2$nodeFilter,\n    _ref2$onLoopError = _ref2.onLoopError,\n    onLoopError = _ref2$onLoopError === void 0 ? function (loopIds) {\n      throw \"Invalid DAG structure! Found cycle in node path: \".concat(loopIds.join(' -> '), \".\");\n    } : _ref2$onLoopError;\n  // linked graph\n  var graph = {};\n  nodes.forEach(function (node) {\n    return graph[idAccessor(node)] = {\n      data: node,\n      out: [],\n      depth: -1,\n      skip: !nodeFilter(node)\n    };\n  });\n  links.forEach(function (_ref3) {\n    var source = _ref3.source,\n      target = _ref3.target;\n    var sourceId = getNodeId(source);\n    var targetId = getNodeId(target);\n    if (!graph.hasOwnProperty(sourceId)) throw \"Missing source node with id: \".concat(sourceId);\n    if (!graph.hasOwnProperty(targetId)) throw \"Missing target node with id: \".concat(targetId);\n    var sourceNode = graph[sourceId];\n    var targetNode = graph[targetId];\n    sourceNode.out.push(targetNode);\n    function getNodeId(node) {\n      return _typeof(node) === 'object' ? idAccessor(node) : node;\n    }\n  });\n  var foundLoops = [];\n  traverse(Object.values(graph));\n  var nodeDepths = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(graph).filter(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      node = _ref5[1];\n    return !node.skip;\n  }).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      id = _ref7[0],\n      node = _ref7[1];\n    return _defineProperty({}, id, node.depth);\n  }))));\n  return nodeDepths;\n  function traverse(nodes) {\n    var nodeStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var currentDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var _loop = function _loop() {\n      var node = nodes[i];\n      if (nodeStack.indexOf(node) !== -1) {\n        var loop = [].concat(_toConsumableArray(nodeStack.slice(nodeStack.indexOf(node))), [node]).map(function (d) {\n          return idAccessor(d.data);\n        });\n        if (!foundLoops.some(function (foundLoop) {\n          return foundLoop.length === loop.length && foundLoop.every(function (id, idx) {\n            return id === loop[idx];\n          });\n        })) {\n          foundLoops.push(loop);\n          onLoopError(loop);\n        }\n        return 1; // continue\n      }\n      if (currentDepth > node.depth) {\n        // Don't unnecessarily revisit chunks of the graph\n        node.depth = currentDepth;\n        traverse(node.out, [].concat(_toConsumableArray(nodeStack), [node]), currentDepth + (node.skip ? 0 : 1));\n      }\n    };\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      if (_loop()) continue;\n    }\n  }\n}\n\nvar three$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  Group: three__WEBPACK_IMPORTED_MODULE_7__.Group,\n  Mesh: three__WEBPACK_IMPORTED_MODULE_7__.Mesh,\n  MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_7__.MeshLambertMaterial,\n  Color: three__WEBPACK_IMPORTED_MODULE_7__.Color,\n  BufferGeometry: three__WEBPACK_IMPORTED_MODULE_7__.BufferGeometry,\n  BufferAttribute: three__WEBPACK_IMPORTED_MODULE_7__.BufferAttribute,\n  Matrix4: three__WEBPACK_IMPORTED_MODULE_7__.Matrix4,\n  Vector3: three__WEBPACK_IMPORTED_MODULE_7__.Vector3,\n  SphereGeometry: three__WEBPACK_IMPORTED_MODULE_7__.SphereGeometry,\n  CylinderGeometry: three__WEBPACK_IMPORTED_MODULE_7__.CylinderGeometry,\n  TubeGeometry: three__WEBPACK_IMPORTED_MODULE_7__.TubeGeometry,\n  ConeGeometry: three__WEBPACK_IMPORTED_MODULE_7__.ConeGeometry,\n  Line: three__WEBPACK_IMPORTED_MODULE_7__.Line,\n  LineBasicMaterial: three__WEBPACK_IMPORTED_MODULE_7__.LineBasicMaterial,\n  QuadraticBezierCurve3: three__WEBPACK_IMPORTED_MODULE_7__.QuadraticBezierCurve3,\n  CubicBezierCurve3: three__WEBPACK_IMPORTED_MODULE_7__.CubicBezierCurve3,\n  Box3: three__WEBPACK_IMPORTED_MODULE_7__.Box3\n};\nvar ngraph = {\n  graph: ngraph_graph__WEBPACK_IMPORTED_MODULE_0__,\n  forcelayout: ngraph_forcelayout__WEBPACK_IMPORTED_MODULE_1__\n};\n\n//\n\nvar DAG_LEVEL_NODE_RATIO = 2;\n\n// support multiple method names for backwards threejs compatibility\nvar setAttributeFn = new three$1.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar applyMatrix4Fn = new three$1.BufferGeometry().applyMatrix4 ? 'applyMatrix4' : 'applyMatrix';\nvar ForceGraph = (0,kapsule__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({\n  props: {\n    jsonUrl: {\n      onChange: function onChange(jsonUrl, state) {\n        var _this = this;\n        if (jsonUrl && !state.fetchingJson) {\n          // Load data asynchronously\n          state.fetchingJson = true;\n          state.onLoading();\n          fetch(jsonUrl).then(function (r) {\n            return r.json();\n          }).then(function (json) {\n            state.fetchingJson = false;\n            state.onFinishLoading(json);\n            _this.graphData(json);\n          });\n        }\n      },\n      triggerUpdate: false\n    },\n    graphData: {\n      \"default\": {\n        nodes: [],\n        links: []\n      },\n      onChange: function onChange(graphData, state) {\n        state.engineRunning = false; // Pause simulation immediately\n      }\n    },\n    numDimensions: {\n      \"default\": 3,\n      onChange: function onChange(numDim, state) {\n        var chargeForce = state.d3ForceLayout.force('charge');\n        // Increase repulsion on 3D mode for improved spatial separation\n        if (chargeForce) {\n          chargeForce.strength(numDim > 2 ? -60 : -30);\n        }\n        if (numDim < 3) {\n          eraseDimension(state.graphData.nodes, 'z');\n        }\n        if (numDim < 2) {\n          eraseDimension(state.graphData.nodes, 'y');\n        }\n        function eraseDimension(nodes, dim) {\n          nodes.forEach(function (d) {\n            delete d[dim]; // position\n            delete d[\"v\".concat(dim)]; // velocity\n          });\n        }\n      }\n    },\n    dagMode: {\n      onChange: function onChange(dagMode, state) {\n        // td, bu, lr, rl, zin, zout, radialin, radialout\n        !dagMode && state.forceEngine === 'd3' && (state.graphData.nodes || []).forEach(function (n) {\n          return n.fx = n.fy = n.fz = undefined;\n        }); // unfix nodes when disabling dag mode\n      }\n    },\n    dagLevelDistance: {},\n    dagNodeFilter: {\n      \"default\": function _default(node) {\n        return true;\n      }\n    },\n    onDagError: {\n      triggerUpdate: false\n    },\n    nodeRelSize: {\n      \"default\": 4\n    },\n    // volume per val unit\n    nodeId: {\n      \"default\": 'id'\n    },\n    nodeVal: {\n      \"default\": 'val'\n    },\n    nodeResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the sphere's circumference\n    nodeColor: {\n      \"default\": 'color'\n    },\n    nodeAutoColorBy: {},\n    nodeOpacity: {\n      \"default\": 0.75\n    },\n    nodeVisibility: {\n      \"default\": true\n    },\n    nodeThreeObject: {},\n    nodeThreeObjectExtend: {\n      \"default\": false\n    },\n    nodePositionUpdate: {\n      triggerUpdate: false\n    },\n    // custom function to call for updating the node's position. Signature: (threeObj, { x, y, z}, node). If the function returns a truthy value, the regular node position update will not run.\n    linkSource: {\n      \"default\": 'source'\n    },\n    linkTarget: {\n      \"default\": 'target'\n    },\n    linkVisibility: {\n      \"default\": true\n    },\n    linkColor: {\n      \"default\": 'color'\n    },\n    linkAutoColorBy: {},\n    linkOpacity: {\n      \"default\": 0.2\n    },\n    linkWidth: {},\n    // Rounded to nearest decimal. For falsy values use dimensionless line with 1px regardless of distance.\n    linkResolution: {\n      \"default\": 6\n    },\n    // how many radial segments in each line tube's geometry\n    linkCurvature: {\n      \"default\": 0,\n      triggerUpdate: false\n    },\n    // line curvature radius (0: straight, 1: semi-circle)\n    linkCurveRotation: {\n      \"default\": 0,\n      triggerUpdate: false\n    },\n    // line curve rotation along the line axis (0: interection with XY plane, PI: upside down)\n    linkMaterial: {},\n    linkThreeObject: {},\n    linkThreeObjectExtend: {\n      \"default\": false\n    },\n    linkPositionUpdate: {\n      triggerUpdate: false\n    },\n    // custom function to call for updating the link's position. Signature: (threeObj, { start: { x, y, z},  end: { x, y, z }}, link). If the function returns a truthy value, the regular link position update will not run.\n    linkDirectionalArrowLength: {\n      \"default\": 0\n    },\n    linkDirectionalArrowColor: {},\n    linkDirectionalArrowRelPos: {\n      \"default\": 0.5,\n      triggerUpdate: false\n    },\n    // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: {\n      \"default\": 0\n    },\n    // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: {\n      \"default\": 0.01,\n      triggerUpdate: false\n    },\n    // in link length ratio per frame\n    linkDirectionalParticleWidth: {\n      \"default\": 0.5\n    },\n    linkDirectionalParticleColor: {},\n    linkDirectionalParticleResolution: {\n      \"default\": 4\n    },\n    // how many slice segments in the particle sphere's circumference\n    forceEngine: {\n      \"default\": 'd3'\n    },\n    // d3 or ngraph\n    d3AlphaMin: {\n      \"default\": 0\n    },\n    d3AlphaDecay: {\n      \"default\": 0.0228,\n      triggerUpdate: false,\n      onChange: function onChange(alphaDecay, state) {\n        state.d3ForceLayout.alphaDecay(alphaDecay);\n      }\n    },\n    d3AlphaTarget: {\n      \"default\": 0,\n      triggerUpdate: false,\n      onChange: function onChange(alphaTarget, state) {\n        state.d3ForceLayout.alphaTarget(alphaTarget);\n      }\n    },\n    d3VelocityDecay: {\n      \"default\": 0.4,\n      triggerUpdate: false,\n      onChange: function onChange(velocityDecay, state) {\n        state.d3ForceLayout.velocityDecay(velocityDecay);\n      }\n    },\n    ngraphPhysics: {\n      \"default\": {\n        // defaults from https://github.com/anvaka/ngraph.physics.simulator/blob/master/index.js\n        timeStep: 20,\n        gravity: -1.2,\n        theta: 0.8,\n        springLength: 30,\n        springCoefficient: 0.0008,\n        dragCoefficient: 0.02\n      }\n    },\n    warmupTicks: {\n      \"default\": 0,\n      triggerUpdate: false\n    },\n    // how many times to tick the force engine at init before starting to render\n    cooldownTicks: {\n      \"default\": Infinity,\n      triggerUpdate: false\n    },\n    cooldownTime: {\n      \"default\": 15000,\n      triggerUpdate: false\n    },\n    // ms\n    onLoading: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onFinishLoading: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onUpdate: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onFinishUpdate: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onEngineTick: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onEngineStop: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    }\n  },\n  methods: {\n    refresh: function refresh(state) {\n      state._flushObjects = true;\n      state._rerender();\n      return this;\n    },\n    // Expose d3 forces for external manipulation\n    d3Force: function d3Force(state, forceName, forceFn) {\n      if (forceFn === undefined) {\n        return state.d3ForceLayout.force(forceName); // Force getter\n      }\n      state.d3ForceLayout.force(forceName, forceFn); // Force setter\n      return this;\n    },\n    d3ReheatSimulation: function d3ReheatSimulation(state) {\n      state.d3ForceLayout.alpha(1);\n      this.resetCountdown();\n      return this;\n    },\n    // reset cooldown state\n    resetCountdown: function resetCountdown(state) {\n      state.cntTicks = 0;\n      state.startTickTime = new Date();\n      state.engineRunning = true;\n      return this;\n    },\n    tickFrame: function tickFrame(state) {\n      var isD3Sim = state.forceEngine !== 'ngraph';\n      if (state.engineRunning) {\n        layoutTick();\n      }\n      updateArrows();\n      updatePhotons();\n      return this;\n\n      //\n\n      function layoutTick() {\n        if (++state.cntTicks > state.cooldownTicks || new Date() - state.startTickTime > state.cooldownTime || isD3Sim && state.d3AlphaMin > 0 && state.d3ForceLayout.alpha() < state.d3AlphaMin) {\n          state.engineRunning = false; // Stop ticking graph\n          state.onEngineStop();\n        } else {\n          state.layout[isD3Sim ? 'tick' : 'step'](); // Tick it\n          state.onEngineTick();\n        }\n        var nodeThreeObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeThreeObjectExtend);\n\n        // Update nodes position\n        state.graphData.nodes.forEach(function (node) {\n          var obj = node.__threeObj;\n          if (!obj) return;\n          var pos = isD3Sim ? node : state.layout.getNodePosition(node[state.nodeId]);\n          var extendedObj = nodeThreeObjectExtendAccessor(node);\n          if (!state.nodePositionUpdate || !state.nodePositionUpdate(extendedObj ? obj.children[0] : obj, {\n            x: pos.x,\n            y: pos.y,\n            z: pos.z\n          }, node) // pass child custom object if extending the default\n          || extendedObj) {\n            obj.position.x = pos.x;\n            obj.position.y = pos.y || 0;\n            obj.position.z = pos.z || 0;\n          }\n        });\n\n        // Update links position\n        var linkWidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkWidth);\n        var linkCurvatureAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkCurvature);\n        var linkCurveRotationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkCurveRotation);\n        var linkThreeObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkThreeObjectExtend);\n        state.graphData.links.forEach(function (link) {\n          var lineObj = link.__lineObj;\n          if (!lineObj) return;\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          calcLinkCurve(link); // calculate link curve for all links, including custom replaced, so it can be used in directional functionality\n\n          var extendedObj = linkThreeObjectExtendAccessor(link);\n          if (state.linkPositionUpdate && state.linkPositionUpdate(extendedObj ? lineObj.children[1] : lineObj,\n          // pass child custom object if extending the default\n          {\n            start: {\n              x: start.x,\n              y: start.y,\n              z: start.z\n            },\n            end: {\n              x: end.x,\n              y: end.y,\n              z: end.z\n            }\n          }, link) && !extendedObj) {\n            // exit if successfully custom updated position of non-extended obj\n            return;\n          }\n          var curveResolution = 30; // # line segments\n          var curve = link.__curve;\n\n          // select default line obj if it's an extended group\n          var line = lineObj.children.length ? lineObj.children[0] : lineObj;\n          if (line.type === 'Line') {\n            // Update line geometry\n            if (!curve) {\n              // straight line\n              var linePos = line.geometry.getAttribute('position');\n              if (!linePos || !linePos.array || linePos.array.length !== 6) {\n                line.geometry[setAttributeFn]('position', linePos = new three$1.BufferAttribute(new Float32Array(2 * 3), 3));\n              }\n              linePos.array[0] = start.x;\n              linePos.array[1] = start.y || 0;\n              linePos.array[2] = start.z || 0;\n              linePos.array[3] = end.x;\n              linePos.array[4] = end.y || 0;\n              linePos.array[5] = end.z || 0;\n              linePos.needsUpdate = true;\n            } else {\n              // bezier curve line\n              line.geometry.setFromPoints(curve.getPoints(curveResolution));\n            }\n            line.geometry.computeBoundingSphere();\n          } else if (line.type === 'Mesh') {\n            // Update cylinder geometry\n\n            if (!curve) {\n              // straight tube\n              if (!line.geometry.type.match(/^Cylinder(Buffer)?Geometry$/)) {\n                var linkWidth = Math.ceil(linkWidthAccessor(link) * 10) / 10;\n                var r = linkWidth / 2;\n                var geometry = new three$1.CylinderGeometry(r, r, 1, state.linkResolution, 1, false);\n                geometry[applyMatrix4Fn](new three$1.Matrix4().makeTranslation(0, 1 / 2, 0));\n                geometry[applyMatrix4Fn](new three$1.Matrix4().makeRotationX(Math.PI / 2));\n                line.geometry.dispose();\n                line.geometry = geometry;\n              }\n              var vStart = new three$1.Vector3(start.x, start.y || 0, start.z || 0);\n              var vEnd = new three$1.Vector3(end.x, end.y || 0, end.z || 0);\n              var distance = vStart.distanceTo(vEnd);\n              line.position.x = vStart.x;\n              line.position.y = vStart.y;\n              line.position.z = vStart.z;\n              line.scale.z = distance;\n              line.parent.localToWorld(vEnd); // lookAt requires world coords\n              line.lookAt(vEnd);\n            } else {\n              // curved tube\n              if (!line.geometry.type.match(/^Tube(Buffer)?Geometry$/)) {\n                // reset object positioning\n                line.position.set(0, 0, 0);\n                line.rotation.set(0, 0, 0);\n                line.scale.set(1, 1, 1);\n              }\n              var _linkWidth = Math.ceil(linkWidthAccessor(link) * 10) / 10;\n              var _r = _linkWidth / 2;\n              var _geometry = new three$1.TubeGeometry(curve, curveResolution, _r, state.linkResolution, false);\n              line.geometry.dispose();\n              line.geometry = _geometry;\n            }\n          }\n        });\n\n        //\n\n        function calcLinkCurve(link) {\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          var curvature = linkCurvatureAccessor(link);\n          if (!curvature) {\n            link.__curve = null; // Straight line\n          } else {\n            // bezier curve line (only for line types)\n            var vStart = new three$1.Vector3(start.x, start.y || 0, start.z || 0);\n            var vEnd = new three$1.Vector3(end.x, end.y || 0, end.z || 0);\n            var l = vStart.distanceTo(vEnd); // line length\n\n            var curve;\n            var curveRotation = linkCurveRotationAccessor(link);\n            if (l > 0) {\n              var dx = end.x - start.x;\n              var dy = end.y - start.y || 0;\n              var vLine = new three$1.Vector3().subVectors(vEnd, vStart);\n              var cp = vLine.clone().multiplyScalar(curvature).cross(dx !== 0 || dy !== 0 ? new three$1.Vector3(0, 0, 1) : new three$1.Vector3(0, 1, 0)) // avoid cross-product of parallel vectors (prefer Z, fallback to Y)\n              .applyAxisAngle(vLine.normalize(), curveRotation) // rotate along line axis according to linkCurveRotation\n              .add(new three$1.Vector3().addVectors(vStart, vEnd).divideScalar(2));\n              curve = new three$1.QuadraticBezierCurve3(vStart, cp, vEnd);\n            } else {\n              // Same point, draw a loop\n              var d = curvature * 70;\n              var endAngle = -curveRotation; // Rotate clockwise (from Z angle perspective)\n              var startAngle = endAngle + Math.PI / 2;\n              curve = new three$1.CubicBezierCurve3(vStart, new three$1.Vector3(d * Math.cos(startAngle), d * Math.sin(startAngle), 0).add(vStart), new three$1.Vector3(d * Math.cos(endAngle), d * Math.sin(endAngle), 0).add(vStart), vEnd);\n            }\n            link.__curve = curve;\n          }\n        }\n      }\n      function updateArrows() {\n        // update link arrow position\n        var arrowRelPosAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowRelPos);\n        var arrowLengthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowLength);\n        var nodeValAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeVal);\n        state.graphData.links.forEach(function (link) {\n          var arrowObj = link.__arrowObj;\n          if (!arrowObj) return;\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          var startR = Math.cbrt(Math.max(0, nodeValAccessor(start) || 1)) * state.nodeRelSize;\n          var endR = Math.cbrt(Math.max(0, nodeValAccessor(end) || 1)) * state.nodeRelSize;\n          var arrowLength = arrowLengthAccessor(link);\n          var arrowRelPos = arrowRelPosAccessor(link);\n          var getPosAlongLine = link.__curve ? function (t) {\n            return link.__curve.getPoint(t);\n          } // interpolate along bezier curve\n          : function (t) {\n            // straight line: interpolate linearly\n            var iplt = function iplt(dim, start, end, t) {\n              return start[dim] + (end[dim] - start[dim]) * t || 0;\n            };\n            return {\n              x: iplt('x', start, end, t),\n              y: iplt('y', start, end, t),\n              z: iplt('z', start, end, t)\n            };\n          };\n          var lineLen = link.__curve ? link.__curve.getLength() : Math.sqrt(['x', 'y', 'z'].map(function (dim) {\n            return Math.pow((end[dim] || 0) - (start[dim] || 0), 2);\n          }).reduce(function (acc, v) {\n            return acc + v;\n          }, 0));\n          var posAlongLine = startR + arrowLength + (lineLen - startR - endR - arrowLength) * arrowRelPos;\n          var arrowHead = getPosAlongLine(posAlongLine / lineLen);\n          var arrowTail = getPosAlongLine((posAlongLine - arrowLength) / lineLen);\n          ['x', 'y', 'z'].forEach(function (dim) {\n            return arrowObj.position[dim] = arrowTail[dim];\n          });\n          var headVec = _construct(three$1.Vector3, _toConsumableArray(['x', 'y', 'z'].map(function (c) {\n            return arrowHead[c];\n          })));\n          arrowObj.parent.localToWorld(headVec); // lookAt requires world coords\n          arrowObj.lookAt(headVec);\n        });\n      }\n      function updatePhotons() {\n        // update link particle positions\n        var particleSpeedAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleSpeed);\n        state.graphData.links.forEach(function (link) {\n          var cyclePhotons = link.__photonsObj && link.__photonsObj.children;\n          var singleHopPhotons = link.__singleHopPhotonsObj && link.__singleHopPhotonsObj.children;\n          if ((!singleHopPhotons || !singleHopPhotons.length) && (!cyclePhotons || !cyclePhotons.length)) return;\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          var particleSpeed = particleSpeedAccessor(link);\n          var getPhotonPos = link.__curve ? function (t) {\n            return link.__curve.getPoint(t);\n          } // interpolate along bezier curve\n          : function (t) {\n            // straight line: interpolate linearly\n            var iplt = function iplt(dim, start, end, t) {\n              return start[dim] + (end[dim] - start[dim]) * t || 0;\n            };\n            return {\n              x: iplt('x', start, end, t),\n              y: iplt('y', start, end, t),\n              z: iplt('z', start, end, t)\n            };\n          };\n          var photons = [].concat(_toConsumableArray(cyclePhotons || []), _toConsumableArray(singleHopPhotons || []));\n          photons.forEach(function (photon, idx) {\n            var singleHop = photon.parent.__linkThreeObjType === 'singleHopPhotons';\n            if (!photon.hasOwnProperty('__progressRatio')) {\n              photon.__progressRatio = singleHop ? 0 : idx / cyclePhotons.length;\n            }\n            photon.__progressRatio += particleSpeed;\n            if (photon.__progressRatio >= 1) {\n              if (!singleHop) {\n                photon.__progressRatio = photon.__progressRatio % 1;\n              } else {\n                // remove particle\n                photon.parent.remove(photon);\n                emptyObject(photon);\n                return;\n              }\n            }\n            var photonPosRatio = photon.__progressRatio;\n            var pos = getPhotonPos(photonPosRatio);\n            ['x', 'y', 'z'].forEach(function (dim) {\n              return photon.position[dim] = pos[dim];\n            });\n          });\n        });\n      }\n    },\n    emitParticle: function emitParticle(state, link) {\n      if (link && state.graphData.links.includes(link)) {\n        if (!link.__singleHopPhotonsObj) {\n          var obj = new three$1.Group();\n          obj.__linkThreeObjType = 'singleHopPhotons';\n          link.__singleHopPhotonsObj = obj;\n          state.graphScene.add(obj);\n        }\n        var particleWidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleWidth);\n        var photonR = Math.ceil(particleWidthAccessor(link) * 10) / 10 / 2;\n        var numSegments = state.linkDirectionalParticleResolution;\n        var particleGeometry = new three$1.SphereGeometry(photonR, numSegments, numSegments);\n        var linkColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkColor);\n        var particleColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleColor);\n        var photonColor = particleColorAccessor(link) || linkColorAccessor(link) || '#f0f0f0';\n        var materialColor = new three$1.Color(colorStr2Hex(photonColor));\n        var opacity = state.linkOpacity * 3;\n        var particleMaterial = new three$1.MeshLambertMaterial({\n          color: materialColor,\n          transparent: true,\n          opacity: opacity\n        });\n\n        // add a single hop particle\n        link.__singleHopPhotonsObj.add(new three$1.Mesh(particleGeometry, particleMaterial));\n      }\n      return this;\n    },\n    getGraphBbox: function getGraphBbox(state) {\n      var nodeFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return true;\n      };\n      if (!state.initialised) return null;\n\n      // recursively collect all nested geometries bboxes\n      var bboxes = function getBboxes(obj) {\n        var bboxes = [];\n        if (obj.geometry) {\n          obj.geometry.computeBoundingBox();\n          var box = new three$1.Box3();\n          box.copy(obj.geometry.boundingBox).applyMatrix4(obj.matrixWorld);\n          bboxes.push(box);\n        }\n        return bboxes.concat.apply(bboxes, _toConsumableArray((obj.children || []).filter(function (obj) {\n          return !obj.hasOwnProperty('__graphObjType') || obj.__graphObjType === 'node' && nodeFilter(obj.__data);\n        } // exclude filtered out nodes\n        ).map(getBboxes)));\n      }(state.graphScene);\n      if (!bboxes.length) return null;\n\n      // extract global x,y,z min/max\n      return Object.assign.apply(Object, _toConsumableArray(['x', 'y', 'z'].map(function (c) {\n        return _defineProperty({}, c, [(0,d3_array__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(bboxes, function (bb) {\n          return bb.min[c];\n        }), (0,d3_array__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(bboxes, function (bb) {\n          return bb.max[c];\n        })]);\n      })));\n    }\n  },\n  stateInit: function stateInit() {\n    return {\n      d3ForceLayout: (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_11__[\"default\"])().force('link', (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_12__[\"default\"])()).force('charge', (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_13__[\"default\"])()).force('center', (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_14__[\"default\"])()).force('dagRadial', null).stop(),\n      engineRunning: false\n    };\n  },\n  init: function init(threeObj, state) {\n    // Main three object to manipulate\n    state.graphScene = threeObj;\n  },\n  update: function update(state, changedProps) {\n    var hasAnyPropChanged = function hasAnyPropChanged(propList) {\n      return propList.some(function (p) {\n        return changedProps.hasOwnProperty(p);\n      });\n    };\n    state.engineRunning = false; // pause simulation\n    state.onUpdate();\n    if (state.nodeAutoColorBy !== null && hasAnyPropChanged(['nodeAutoColorBy', 'graphData', 'nodeColor'])) {\n      // Auto add color to uncolored nodes\n      autoColorObjects(state.graphData.nodes, (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeAutoColorBy), state.nodeColor);\n    }\n    if (state.linkAutoColorBy !== null && hasAnyPropChanged(['linkAutoColorBy', 'graphData', 'linkColor'])) {\n      // Auto add color to uncolored links\n      autoColorObjects(state.graphData.links, (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkAutoColorBy), state.linkColor);\n    }\n\n    // Digest nodes WebGL objects\n    if (state._flushObjects || hasAnyPropChanged(['graphData', 'nodeThreeObject', 'nodeThreeObjectExtend', 'nodeVal', 'nodeColor', 'nodeVisibility', 'nodeRelSize', 'nodeResolution', 'nodeOpacity'])) {\n      var customObjectAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeThreeObject);\n      var customObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeThreeObjectExtend);\n      var valAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeVal);\n      var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeColor);\n      var visibilityAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeVisibility);\n      var sphereGeometries = {}; // indexed by node value\n      var sphereMaterials = {}; // indexed by color\n\n      threeDigest(state.graphData.nodes.filter(visibilityAccessor), state.graphScene, {\n        purge: state._flushObjects || hasAnyPropChanged([\n        // recreate objects if any of these props have changed\n        'nodeThreeObject', 'nodeThreeObjectExtend']),\n        objFilter: function objFilter(obj) {\n          return obj.__graphObjType === 'node';\n        },\n        createObj: function createObj(node) {\n          var customObj = customObjectAccessor(node);\n          var extendObj = customObjectExtendAccessor(node);\n          if (customObj && state.nodeThreeObject === customObj) {\n            // clone object if it's a shared object among all nodes\n            customObj = customObj.clone();\n          }\n          var obj;\n          if (customObj && !extendObj) {\n            obj = customObj;\n          } else {\n            // Add default object (sphere mesh)\n            obj = new three$1.Mesh();\n            obj.__graphDefaultObj = true;\n            if (customObj && extendObj) {\n              obj.add(customObj); // extend default with custom\n            }\n          }\n          obj.__graphObjType = 'node'; // Add object type\n\n          return obj;\n        },\n        updateObj: function updateObj(obj, node) {\n          if (obj.__graphDefaultObj) {\n            // bypass internal updates for custom node objects\n            var val = valAccessor(node) || 1;\n            var radius = Math.cbrt(val) * state.nodeRelSize;\n            var numSegments = state.nodeResolution;\n            if (!obj.geometry.type.match(/^Sphere(Buffer)?Geometry$/) || obj.geometry.parameters.radius !== radius || obj.geometry.parameters.widthSegments !== numSegments) {\n              if (!sphereGeometries.hasOwnProperty(val)) {\n                sphereGeometries[val] = new three$1.SphereGeometry(radius, numSegments, numSegments);\n              }\n              obj.geometry.dispose();\n              obj.geometry = sphereGeometries[val];\n            }\n            var color = colorAccessor(node);\n            var materialColor = new three$1.Color(colorStr2Hex(color || '#ffffaa'));\n            var opacity = state.nodeOpacity * colorAlpha(color);\n            if (obj.material.type !== 'MeshLambertMaterial' || !obj.material.color.equals(materialColor) || obj.material.opacity !== opacity) {\n              if (!sphereMaterials.hasOwnProperty(color)) {\n                sphereMaterials[color] = new three$1.MeshLambertMaterial({\n                  color: materialColor,\n                  transparent: true,\n                  opacity: opacity\n                });\n              }\n              obj.material.dispose();\n              obj.material = sphereMaterials[color];\n            }\n          }\n        }\n      });\n    }\n\n    // Digest links WebGL objects\n    if (state._flushObjects || hasAnyPropChanged(['graphData', 'linkThreeObject', 'linkThreeObjectExtend', 'linkMaterial', 'linkColor', 'linkWidth', 'linkVisibility', 'linkResolution', 'linkOpacity', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution'])) {\n      var _customObjectAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkThreeObject);\n      var _customObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkThreeObjectExtend);\n      var customMaterialAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkMaterial);\n      var _visibilityAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkVisibility);\n      var _colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkColor);\n      var widthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkWidth);\n      var cylinderGeometries = {}; // indexed by link width\n      var lambertLineMaterials = {}; // for cylinder objects, indexed by link color\n      var basicLineMaterials = {}; // for line objects, indexed by link color\n\n      var visibleLinks = state.graphData.links.filter(_visibilityAccessor);\n\n      // lines digest cycle\n      threeDigest(visibleLinks, state.graphScene, {\n        objBindAttr: '__lineObj',\n        purge: state._flushObjects || hasAnyPropChanged([\n        // recreate objects if any of these props have changed\n        'linkThreeObject', 'linkThreeObjectExtend', 'linkWidth']),\n        objFilter: function objFilter(obj) {\n          return obj.__graphObjType === 'link';\n        },\n        exitObj: function exitObj(obj) {\n          // remove trailing single photons\n          var singlePhotonsObj = obj.__data && obj.__data.__singleHopPhotonsObj;\n          if (singlePhotonsObj) {\n            singlePhotonsObj.parent.remove(singlePhotonsObj);\n            emptyObject(singlePhotonsObj);\n            delete obj.__data.__singleHopPhotonsObj;\n          }\n        },\n        createObj: function createObj(link) {\n          var customObj = _customObjectAccessor(link);\n          var extendObj = _customObjectExtendAccessor(link);\n          if (customObj && state.linkThreeObject === customObj) {\n            // clone object if it's a shared object among all links\n            customObj = customObj.clone();\n          }\n          var defaultObj;\n          if (!customObj || extendObj) {\n            // construct default line obj\n            var useCylinder = !!widthAccessor(link);\n            if (useCylinder) {\n              defaultObj = new three$1.Mesh();\n            } else {\n              // Use plain line (constant width)\n              var lineGeometry = new three$1.BufferGeometry();\n              lineGeometry[setAttributeFn]('position', new three$1.BufferAttribute(new Float32Array(2 * 3), 3));\n              defaultObj = new three$1.Line(lineGeometry);\n            }\n          }\n          var obj;\n          if (!customObj) {\n            obj = defaultObj;\n            obj.__graphDefaultObj = true;\n          } else {\n            if (!extendObj) {\n              // use custom object\n              obj = customObj;\n            } else {\n              // extend default with custom in a group\n              obj = new three$1.Group();\n              obj.__graphDefaultObj = true;\n              obj.add(defaultObj);\n              obj.add(customObj);\n            }\n          }\n          obj.renderOrder = 10; // Prevent visual glitches of dark lines on top of nodes by rendering them last\n\n          obj.__graphObjType = 'link'; // Add object type\n\n          return obj;\n        },\n        updateObj: function updateObj(updObj, link) {\n          if (updObj.__graphDefaultObj) {\n            // bypass internal updates for custom link objects\n            // select default object if it's an extended group\n            var obj = updObj.children.length ? updObj.children[0] : updObj;\n            var linkWidth = Math.ceil(widthAccessor(link) * 10) / 10;\n            var useCylinder = !!linkWidth;\n            if (useCylinder) {\n              var r = linkWidth / 2;\n              var numSegments = state.linkResolution;\n              if (!obj.geometry.type.match(/^Cylinder(Buffer)?Geometry$/) || obj.geometry.parameters.radiusTop !== r || obj.geometry.parameters.radialSegments !== numSegments) {\n                if (!cylinderGeometries.hasOwnProperty(linkWidth)) {\n                  var geometry = new three$1.CylinderGeometry(r, r, 1, numSegments, 1, false);\n                  geometry[applyMatrix4Fn](new three$1.Matrix4().makeTranslation(0, 1 / 2, 0));\n                  geometry[applyMatrix4Fn](new three$1.Matrix4().makeRotationX(Math.PI / 2));\n                  cylinderGeometries[linkWidth] = geometry;\n                }\n                obj.geometry.dispose();\n                obj.geometry = cylinderGeometries[linkWidth];\n              }\n            }\n            var customMaterial = customMaterialAccessor(link);\n            if (customMaterial) {\n              obj.material = customMaterial;\n            } else {\n              var color = _colorAccessor(link);\n              var materialColor = new three$1.Color(colorStr2Hex(color || '#f0f0f0'));\n              var opacity = state.linkOpacity * colorAlpha(color);\n              var materialType = useCylinder ? 'MeshLambertMaterial' : 'LineBasicMaterial';\n              if (obj.material.type !== materialType || !obj.material.color.equals(materialColor) || obj.material.opacity !== opacity) {\n                var lineMaterials = useCylinder ? lambertLineMaterials : basicLineMaterials;\n                if (!lineMaterials.hasOwnProperty(color)) {\n                  lineMaterials[color] = new three$1[materialType]({\n                    color: materialColor,\n                    transparent: opacity < 1,\n                    opacity: opacity,\n                    depthWrite: opacity >= 1 // Prevent transparency issues\n                  });\n                }\n                obj.material.dispose();\n                obj.material = lineMaterials[color];\n              }\n            }\n          }\n        }\n      });\n\n      // Arrows digest cycle\n      if (state.linkDirectionalArrowLength || changedProps.hasOwnProperty('linkDirectionalArrowLength')) {\n        var arrowLengthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowLength);\n        var arrowColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowColor);\n        threeDigest(visibleLinks.filter(arrowLengthAccessor), state.graphScene, {\n          objBindAttr: '__arrowObj',\n          objFilter: function objFilter(obj) {\n            return obj.__linkThreeObjType === 'arrow';\n          },\n          createObj: function createObj() {\n            var obj = new three$1.Mesh(undefined, new three$1.MeshLambertMaterial({\n              transparent: true\n            }));\n            obj.__linkThreeObjType = 'arrow'; // Add object type\n\n            return obj;\n          },\n          updateObj: function updateObj(obj, link) {\n            var arrowLength = arrowLengthAccessor(link);\n            var numSegments = state.linkDirectionalArrowResolution;\n            if (!obj.geometry.type.match(/^Cone(Buffer)?Geometry$/) || obj.geometry.parameters.height !== arrowLength || obj.geometry.parameters.radialSegments !== numSegments) {\n              var coneGeometry = new three$1.ConeGeometry(arrowLength * 0.25, arrowLength, numSegments);\n              // Correct orientation\n              coneGeometry.translate(0, arrowLength / 2, 0);\n              coneGeometry.rotateX(Math.PI / 2);\n              obj.geometry.dispose();\n              obj.geometry = coneGeometry;\n            }\n            var arrowColor = arrowColorAccessor(link) || _colorAccessor(link) || '#f0f0f0';\n            obj.material.color = new three$1.Color(colorStr2Hex(arrowColor));\n            obj.material.opacity = state.linkOpacity * 3 * colorAlpha(arrowColor);\n          }\n        });\n      }\n\n      // Photon particles digest cycle\n      if (state.linkDirectionalParticles || changedProps.hasOwnProperty('linkDirectionalParticles')) {\n        var particlesAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticles);\n        var particleWidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleWidth);\n        var particleColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleColor);\n        var particleMaterials = {}; // indexed by link color\n        var particleGeometries = {}; // indexed by particle width\n\n        threeDigest(visibleLinks.filter(particlesAccessor), state.graphScene, {\n          objBindAttr: '__photonsObj',\n          objFilter: function objFilter(obj) {\n            return obj.__linkThreeObjType === 'photons';\n          },\n          createObj: function createObj() {\n            var obj = new three$1.Group();\n            obj.__linkThreeObjType = 'photons'; // Add object type\n\n            return obj;\n          },\n          updateObj: function updateObj(obj, link) {\n            var numPhotons = Math.round(Math.abs(particlesAccessor(link)));\n            var curPhoton = !!obj.children.length && obj.children[0];\n            var photonR = Math.ceil(particleWidthAccessor(link) * 10) / 10 / 2;\n            var numSegments = state.linkDirectionalParticleResolution;\n            var particleGeometry;\n            if (curPhoton && curPhoton.geometry.parameters.radius === photonR && curPhoton.geometry.parameters.widthSegments === numSegments) {\n              particleGeometry = curPhoton.geometry;\n            } else {\n              if (!particleGeometries.hasOwnProperty(photonR)) {\n                particleGeometries[photonR] = new three$1.SphereGeometry(photonR, numSegments, numSegments);\n              }\n              particleGeometry = particleGeometries[photonR];\n              curPhoton && curPhoton.geometry.dispose();\n            }\n            var photonColor = particleColorAccessor(link) || _colorAccessor(link) || '#f0f0f0';\n            var materialColor = new three$1.Color(colorStr2Hex(photonColor));\n            var opacity = state.linkOpacity * 3;\n            var particleMaterial;\n            if (curPhoton && curPhoton.material.color.equals(materialColor) && curPhoton.material.opacity === opacity) {\n              particleMaterial = curPhoton.material;\n            } else {\n              if (!particleMaterials.hasOwnProperty(photonColor)) {\n                particleMaterials[photonColor] = new three$1.MeshLambertMaterial({\n                  color: materialColor,\n                  transparent: true,\n                  opacity: opacity\n                });\n              }\n              particleMaterial = particleMaterials[photonColor];\n              curPhoton && curPhoton.material.dispose();\n            }\n\n            // digest cycle for each photon\n            threeDigest(_toConsumableArray(new Array(numPhotons)).map(function (_, idx) {\n              return {\n                idx: idx\n              };\n            }), obj, {\n              idAccessor: function idAccessor(d) {\n                return d.idx;\n              },\n              createObj: function createObj() {\n                return new three$1.Mesh(particleGeometry, particleMaterial);\n              },\n              updateObj: function updateObj(obj) {\n                obj.geometry = particleGeometry;\n                obj.material = particleMaterial;\n              }\n            });\n          }\n        });\n      }\n    }\n    state._flushObjects = false; // reset objects refresh flag\n\n    // simulation engine\n    if (hasAnyPropChanged(['graphData', 'nodeId', 'linkSource', 'linkTarget', 'numDimensions', 'forceEngine', 'dagMode', 'dagNodeFilter', 'dagLevelDistance'])) {\n      state.engineRunning = false; // Pause simulation\n\n      // parse links\n      state.graphData.links.forEach(function (link) {\n        link.source = link[state.linkSource];\n        link.target = link[state.linkTarget];\n      });\n\n      // Feed data to force-directed layout\n      var isD3Sim = state.forceEngine !== 'ngraph';\n      var layout;\n      if (isD3Sim) {\n        // D3-force\n        (layout = state.d3ForceLayout).stop().alpha(1) // re-heat the simulation\n        .numDimensions(state.numDimensions).nodes(state.graphData.nodes);\n\n        // add links (if link force is still active)\n        var linkForce = state.d3ForceLayout.force('link');\n        if (linkForce) {\n          linkForce.id(function (d) {\n            return d[state.nodeId];\n          }).links(state.graphData.links);\n        }\n\n        // setup dag force constraints\n        var nodeDepths = state.dagMode && getDagDepths(state.graphData, function (node) {\n          return node[state.nodeId];\n        }, {\n          nodeFilter: state.dagNodeFilter,\n          onLoopError: state.onDagError || undefined\n        });\n        var maxDepth = Math.max.apply(Math, _toConsumableArray(Object.values(nodeDepths || [])));\n        var dagLevelDistance = state.dagLevelDistance || state.graphData.nodes.length / (maxDepth || 1) * DAG_LEVEL_NODE_RATIO * (['radialin', 'radialout'].indexOf(state.dagMode) !== -1 ? 0.7 : 1);\n\n        // Fix nodes to x,y,z for dag mode\n        if (state.dagMode) {\n          var getFFn = function getFFn(fix, invert) {\n            return function (node) {\n              return !fix ? undefined : (nodeDepths[node[state.nodeId]] - maxDepth / 2) * dagLevelDistance * (invert ? -1 : 1);\n            };\n          };\n          var fxFn = getFFn(['lr', 'rl'].indexOf(state.dagMode) !== -1, state.dagMode === 'rl');\n          var fyFn = getFFn(['td', 'bu'].indexOf(state.dagMode) !== -1, state.dagMode === 'td');\n          var fzFn = getFFn(['zin', 'zout'].indexOf(state.dagMode) !== -1, state.dagMode === 'zout');\n          state.graphData.nodes.filter(state.dagNodeFilter).forEach(function (node) {\n            node.fx = fxFn(node);\n            node.fy = fyFn(node);\n            node.fz = fzFn(node);\n          });\n        }\n\n        // Use radial force for radial dags\n        state.d3ForceLayout.force('dagRadial', ['radialin', 'radialout'].indexOf(state.dagMode) !== -1 ? (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(function (node) {\n          var nodeDepth = nodeDepths[node[state.nodeId]] || -1;\n          return (state.dagMode === 'radialin' ? maxDepth - nodeDepth : nodeDepth) * dagLevelDistance;\n        }).strength(function (node) {\n          return state.dagNodeFilter(node) ? 1 : 0;\n        }) : null);\n      } else {\n        // ngraph\n        var _graph = ngraph.graph();\n        state.graphData.nodes.forEach(function (node) {\n          _graph.addNode(node[state.nodeId]);\n        });\n        state.graphData.links.forEach(function (link) {\n          _graph.addLink(link.source, link.target);\n        });\n        layout = ngraph.forcelayout(_graph, _objectSpread2({\n          dimensions: state.numDimensions\n        }, state.ngraphPhysics));\n        layout.graph = _graph; // Attach graph reference to layout\n      }\n      for (var i = 0; i < state.warmupTicks && !(isD3Sim && state.d3AlphaMin > 0 && state.d3ForceLayout.alpha() < state.d3AlphaMin); i++) {\n        layout[isD3Sim ? \"tick\" : \"step\"]();\n      } // Initial ticks before starting to render\n\n      state.layout = layout;\n      this.resetCountdown();\n    }\n    state.engineRunning = true; // resume simulation\n\n    state.onFinishUpdate();\n  }\n});\n\nfunction fromKapsule (kapsule) {\n  var baseClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object;\n  var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var FromKapsule = /*#__PURE__*/function (_baseClass) {\n    _inherits(FromKapsule, _baseClass);\n    function FromKapsule() {\n      var _this;\n      _classCallCheck(this, FromKapsule);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, FromKapsule, [].concat(args));\n      _this.__kapsuleInstance = kapsule().apply(void 0, [].concat(_toConsumableArray(initKapsuleWithSelf ? [_assertThisInitialized(_this)] : []), args));\n      return _this;\n    }\n    return _createClass(FromKapsule);\n  }(baseClass); // attach kapsule props/methods to class prototype\n  Object.keys(kapsule()).forEach(function (m) {\n    return FromKapsule.prototype[m] = function () {\n      var _this$__kapsuleInstan;\n      var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m].apply(_this$__kapsuleInstan, arguments);\n      return returnVal === this.__kapsuleInstance ? this // chain based on this class, not the kapsule obj\n      : returnVal;\n    };\n  });\n  return FromKapsule;\n}\n\nvar three = window.THREE ? window.THREE : {\n  Group: three__WEBPACK_IMPORTED_MODULE_7__.Group\n}; // Prefer consumption from global THREE, if exists\nvar threeForcegraph = fromKapsule(ForceGraph, three.Group, true);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/three-forcegraph@1.41.14_three@0.167.1/node_modules/three-forcegraph/dist/three-forcegraph.mjs\n");

/***/ })

};
;