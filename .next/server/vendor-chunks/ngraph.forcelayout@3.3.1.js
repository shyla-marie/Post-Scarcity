/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ngraph.forcelayout@3.3.1";
exports.ids = ["vendor-chunks/ngraph.forcelayout@3.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = createLayout;\nmodule.exports.simulator = __webpack_require__(/*! ./lib/createPhysicsSimulator */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js\");\n\nvar eventify = __webpack_require__(/*! ngraph.events */ \"(ssr)/./node_modules/.pnpm/ngraph.events@1.2.2/node_modules/ngraph.events/index.js\");\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = (physicsSettings && physicsSettings.createSimulator) || __webpack_require__(/*! ./lib/createPhysicsSimulator */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js\");\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n      updateStableStatus(isStableNow);\n\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n\n  function getForceVectorLength() {\n    var fx = 0, fy = 0;\n    forEachBody(function(body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody  = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\n\nfunction noop() { }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js ***!
  \********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const getVariableName = __webpack_require__(/*! ./getVariableName */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js\");\n\nmodule.exports = function createPatternBuilder(dimension) {\n\n  return pattern;\n  \n  function pattern(template, config) {\n    let indent = (config && config.indent) || 0;\n    let join = (config && config.join !== undefined) ? config.join : '\\n';\n    let indentString = Array(indent + 1).join(' ');\n    let buffer = [];\n    for (let i = 0; i < dimension; ++i) {\n      let variableName = getVariableName(i);\n      let prefix = (i === 0) ? '' : indentString;\n      buffer.push(prefix + template.replace(/{var}/g, variableName));\n    }\n    return buffer.join(join);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2NyZWF0ZVBhdHRlcm5CdWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QixtQkFBTyxDQUFDLG9KQUFtQjs7QUFFbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQztBQUNBO0FBQ0EsOENBQThDLElBQUk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFfcG9zdF9zY2FyY2l0eS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvY3JlYXRlUGF0dGVybkJ1aWxkZXIuanM/YzA5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRWYXJpYWJsZU5hbWUgPSByZXF1aXJlKCcuL2dldFZhcmlhYmxlTmFtZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbikge1xuXG4gIHJldHVybiBwYXR0ZXJuO1xuICBcbiAgZnVuY3Rpb24gcGF0dGVybih0ZW1wbGF0ZSwgY29uZmlnKSB7XG4gICAgbGV0IGluZGVudCA9IChjb25maWcgJiYgY29uZmlnLmluZGVudCkgfHwgMDtcbiAgICBsZXQgam9pbiA9IChjb25maWcgJiYgY29uZmlnLmpvaW4gIT09IHVuZGVmaW5lZCkgPyBjb25maWcuam9pbiA6ICdcXG4nO1xuICAgIGxldCBpbmRlbnRTdHJpbmcgPSBBcnJheShpbmRlbnQgKyAxKS5qb2luKCcgJyk7XG4gICAgbGV0IGJ1ZmZlciA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGltZW5zaW9uOyArK2kpIHtcbiAgICAgIGxldCB2YXJpYWJsZU5hbWUgPSBnZXRWYXJpYWJsZU5hbWUoaSk7XG4gICAgICBsZXQgcHJlZml4ID0gKGkgPT09IDApID8gJycgOiBpbmRlbnRTdHJpbmc7XG4gICAgICBidWZmZXIucHVzaChwcmVmaXggKyB0ZW1wbGF0ZS5yZXBsYWNlKC97dmFyfS9nLCB2YXJpYWJsZU5hbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlci5qb2luKGpvaW4pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js ***!
  \**************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = generateBoundsFunction;\nmodule.exports.generateFunctionBody = generateBoundsFunctionBody;\n\nconst createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nfunction generateBoundsFunction(dimension) {\n  let code = generateBoundsFunctionBody(dimension);\n  return new Function('bodies', 'settings', 'random', code);\n}\n\nfunction generateBoundsFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n\n  let code = `\n  var boundingBox = {\n    ${pattern('min_{var}: 0, max_{var}: 0,', {indent: 4})}\n  };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset: resetBoundingBox,\n\n    getBestNewPosition: function (neighbors) {\n      var ${pattern('base_{var} = 0', {join: ', '})};\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          let neighborPos = neighbors[i].pos;\n          ${pattern('base_{var} += neighborPos.{var};', {indent: 10})}\n        }\n\n        ${pattern('base_{var} /= neighbors.length;', {indent: 8})}\n      } else {\n        ${pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {indent: 8})}\n      }\n\n      var springLength = settings.springLength;\n      return {\n        ${pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {indent: 8})}\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) return; // No bodies - no borders.\n\n    ${pattern('var max_{var} = -Infinity;', {indent: 4})}\n    ${pattern('var min_{var} = Infinity;', {indent: 4})}\n\n    while(i--) {\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\n      var bodyPos = bodies[i].pos;\n      ${pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {indent: 6})}\n      ${pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {indent: 6})}\n    }\n\n    ${pattern('boundingBox.min_{var} = min_{var};', {indent: 4})}\n    ${pattern('boundingBox.max_{var} = max_{var};', {indent: 4})}\n  }\n\n  function resetBoundingBox() {\n    ${pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {indent: 4})}\n  }\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQm91bmRzLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkMsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNLGNBQWMsSUFBSSxVQUFVLElBQUksUUFBUSxVQUFVO0FBQ3hEOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSxZQUFZLGVBQWUsS0FBSyxPQUFPLFdBQVc7O0FBRWxEO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBLFlBQVksZUFBZSxLQUFLLGdCQUFnQixLQUFLLElBQUksV0FBVztBQUNwRTs7QUFFQSxVQUFVLGVBQWUsS0FBSyxvQkFBb0IsSUFBSSxVQUFVO0FBQ2hFLFFBQVE7QUFDUixVQUFVLGVBQWUsS0FBSyxvQkFBb0IsS0FBSyxtQkFBbUIsSUFBSSxNQUFNLElBQUksVUFBVTtBQUNsRzs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxVQUFVLElBQUksUUFBUSxLQUFLLGlEQUFpRCxVQUFVO0FBQ2hHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QixNQUFNLGtCQUFrQixLQUFLLFlBQVksSUFBSSxVQUFVO0FBQ3ZELE1BQU0sa0JBQWtCLEtBQUssV0FBVyxJQUFJLFVBQVU7O0FBRXREO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0JBQXNCLEtBQUssT0FBTyxJQUFJLE9BQU8sS0FBSyxXQUFXLEtBQUssSUFBSSxVQUFVO0FBQ3hGLFFBQVEsc0JBQXNCLEtBQUssT0FBTyxJQUFJLE9BQU8sS0FBSyxXQUFXLEtBQUssSUFBSSxVQUFVO0FBQ3hGOztBQUVBLE1BQU0sMEJBQTBCLEtBQUssT0FBTyxLQUFLLElBQUksVUFBVTtBQUMvRCxNQUFNLDBCQUEwQixLQUFLLE9BQU8sS0FBSyxJQUFJLFVBQVU7QUFDL0Q7O0FBRUE7QUFDQSxNQUFNLDBCQUEwQixLQUFLLG1CQUFtQixLQUFLLElBQUksSUFBSSxVQUFVO0FBQy9FO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hX3Bvc3Rfc2NhcmNpdHkvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQm91bmRzLmpzPzUzMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlQm91bmRzRnVuY3Rpb247XG5tb2R1bGUuZXhwb3J0cy5nZW5lcmF0ZUZ1bmN0aW9uQm9keSA9IGdlbmVyYXRlQm91bmRzRnVuY3Rpb25Cb2R5O1xuXG5jb25zdCBjcmVhdGVQYXR0ZXJuQnVpbGRlciA9IHJlcXVpcmUoJy4vY3JlYXRlUGF0dGVybkJ1aWxkZXInKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVCb3VuZHNGdW5jdGlvbihkaW1lbnNpb24pIHtcbiAgbGV0IGNvZGUgPSBnZW5lcmF0ZUJvdW5kc0Z1bmN0aW9uQm9keShkaW1lbnNpb24pO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdib2RpZXMnLCAnc2V0dGluZ3MnLCAncmFuZG9tJywgY29kZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQm91bmRzRnVuY3Rpb25Cb2R5KGRpbWVuc2lvbikge1xuICBsZXQgcGF0dGVybiA9IGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbik7XG5cbiAgbGV0IGNvZGUgPSBgXG4gIHZhciBib3VuZGluZ0JveCA9IHtcbiAgICAke3BhdHRlcm4oJ21pbl97dmFyfTogMCwgbWF4X3t2YXJ9OiAwLCcsIHtpbmRlbnQ6IDR9KX1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJveDogYm91bmRpbmdCb3gsXG5cbiAgICB1cGRhdGU6IHVwZGF0ZUJvdW5kaW5nQm94LFxuXG4gICAgcmVzZXQ6IHJlc2V0Qm91bmRpbmdCb3gsXG5cbiAgICBnZXRCZXN0TmV3UG9zaXRpb246IGZ1bmN0aW9uIChuZWlnaGJvcnMpIHtcbiAgICAgIHZhciAke3BhdHRlcm4oJ2Jhc2Vfe3Zhcn0gPSAwJywge2pvaW46ICcsICd9KX07XG5cbiAgICAgIGlmIChuZWlnaGJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgbGV0IG5laWdoYm9yUG9zID0gbmVpZ2hib3JzW2ldLnBvcztcbiAgICAgICAgICAke3BhdHRlcm4oJ2Jhc2Vfe3Zhcn0gKz0gbmVpZ2hib3JQb3Mue3Zhcn07Jywge2luZGVudDogMTB9KX1cbiAgICAgICAgfVxuXG4gICAgICAgICR7cGF0dGVybignYmFzZV97dmFyfSAvPSBuZWlnaGJvcnMubGVuZ3RoOycsIHtpbmRlbnQ6IDh9KX1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR7cGF0dGVybignYmFzZV97dmFyfSA9IChib3VuZGluZ0JveC5taW5fe3Zhcn0gKyBib3VuZGluZ0JveC5tYXhfe3Zhcn0pIC8gMjsnLCB7aW5kZW50OiA4fSl9XG4gICAgICB9XG5cbiAgICAgIHZhciBzcHJpbmdMZW5ndGggPSBzZXR0aW5ncy5zcHJpbmdMZW5ndGg7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAke3BhdHRlcm4oJ3t2YXJ9OiBiYXNlX3t2YXJ9ICsgKHJhbmRvbS5uZXh0RG91YmxlKCkgLSAwLjUpICogc3ByaW5nTGVuZ3RoLCcsIHtpbmRlbnQ6IDh9KX1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJvdW5kaW5nQm94KCkge1xuICAgIHZhciBpID0gYm9kaWVzLmxlbmd0aDtcbiAgICBpZiAoaSA9PT0gMCkgcmV0dXJuOyAvLyBObyBib2RpZXMgLSBubyBib3JkZXJzLlxuXG4gICAgJHtwYXR0ZXJuKCd2YXIgbWF4X3t2YXJ9ID0gLUluZmluaXR5OycsIHtpbmRlbnQ6IDR9KX1cbiAgICAke3BhdHRlcm4oJ3ZhciBtaW5fe3Zhcn0gPSBJbmZpbml0eTsnLCB7aW5kZW50OiA0fSl9XG5cbiAgICB3aGlsZShpLS0pIHtcbiAgICAgIC8vIHRoaXMgaXMgTyhuKSwgaXQgY291bGQgYmUgZG9uZSBmYXN0ZXIgd2l0aCBxdWFkdHJlZSwgaWYgd2UgY2hlY2sgdGhlIHJvb3Qgbm9kZSBib3VuZHNcbiAgICAgIHZhciBib2R5UG9zID0gYm9kaWVzW2ldLnBvcztcbiAgICAgICR7cGF0dGVybignaWYgKGJvZHlQb3Mue3Zhcn0gPCBtaW5fe3Zhcn0pIG1pbl97dmFyfSA9IGJvZHlQb3Mue3Zhcn07Jywge2luZGVudDogNn0pfVxuICAgICAgJHtwYXR0ZXJuKCdpZiAoYm9keVBvcy57dmFyfSA+IG1heF97dmFyfSkgbWF4X3t2YXJ9ID0gYm9keVBvcy57dmFyfTsnLCB7aW5kZW50OiA2fSl9XG4gICAgfVxuXG4gICAgJHtwYXR0ZXJuKCdib3VuZGluZ0JveC5taW5fe3Zhcn0gPSBtaW5fe3Zhcn07Jywge2luZGVudDogNH0pfVxuICAgICR7cGF0dGVybignYm91bmRpbmdCb3gubWF4X3t2YXJ9ID0gbWF4X3t2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0Qm91bmRpbmdCb3goKSB7XG4gICAgJHtwYXR0ZXJuKCdib3VuZGluZ0JveC5taW5fe3Zhcn0gPSBib3VuZGluZ0JveC5tYXhfe3Zhcn0gPSAwOycsIHtpbmRlbnQ6IDR9KX1cbiAgfVxuYDtcbiAgcmV0dXJuIGNvZGU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js ***!
  \******************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\n// InlineTransform: getVectorCode\nmodule.exports.getVectorCode = getVectorCode;\n// InlineTransform: getBodyCode\nmodule.exports.getBodyCode = getBodyCode;\n// InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  let code = generateCreateBodyFunctionBody(dimension, debugSetters);\n  let {Body} = (new Function(code))();\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  let code = `\n${getVectorCode(dimension, debugSetters)}\n${getBodyCode(dimension, debugSetters)}\nreturn {Body: Body, Vector: Vector};\n`;\n  return code;\n}\n\nfunction getBodyCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let variableList = pattern('{var}', {join: ', '});\n  return `\nfunction Body(${variableList}) {\n  this.isPinned = false;\n  this.pos = new Vector(${variableList});\n  this.force = new Vector();\n  this.velocity = new Vector();\n  this.mass = 1;\n\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.reset = function() {\n  this.force.reset();\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.setPosition = function (${variableList}) {\n  ${pattern('this.pos.{var} = {var} || 0;', {indent: 2})}\n};`;\n}\n\nfunction getVectorCode(dimension, debugSetters) {\n  let pattern = createPatternBuilder(dimension);\n  let setters = '';\n  if (debugSetters) {\n    setters = `${pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\")}`;\n  }\n\n  let variableList = pattern('{var}', {join: ', '});\n  return `function Vector(${variableList}) {\n  ${setters}\n    if (typeof arguments[0] === 'object') {\n      // could be another vector\n      let v = arguments[0];\n      ${pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {indent: 4})}\n      ${pattern('this.{var} = v.{var};', {indent: 4})}\n    } else {\n      ${pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {indent: 4})}\n    }\n  }\n  \n  Vector.prototype.reset = function () {\n    ${pattern('this.{var} = ', {join: ''})}0;\n  };`;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlQm9keS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCOztBQUU3RDtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSwwQkFBMEI7QUFDMUIsd0RBQXdEOztBQUV4RDtBQUNBO0FBQ0EsT0FBTyxNQUFNO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLEVBQUU7QUFDRixRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSSxJQUFJLFdBQVc7QUFDbEQ7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUMsYUFBYTtBQUN0RCxJQUFJLG1CQUFtQixLQUFLLEdBQUcsS0FBSyxLQUFLLElBQUksVUFBVTtBQUN2RCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsU0FBUyxLQUFLO0FBQ2QsOEJBQThCLElBQUksSUFBSTtBQUN0QyxxQkFBcUI7QUFDckIseUVBQXlFLElBQUksR0FBRztBQUNoRixNQUFNLEtBQUssS0FBSztBQUNoQixHQUFHO0FBQ0gsb0JBQW9CLFNBQVMsT0FBTztBQUNwQyxDQUFDLEVBQUUsR0FBRztBQUNOOztBQUVBLCtCQUErQixJQUFJLElBQUksV0FBVztBQUNsRCw0QkFBNEIsYUFBYTtBQUN6QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpQ0FBaUMsSUFBSSxrRkFBa0YsSUFBSSxJQUFJLElBQUksVUFBVTtBQUNySixRQUFRLGVBQWUsS0FBSyxLQUFLLEtBQUssSUFBSSxVQUFVO0FBQ3BELE1BQU07QUFDTixRQUFRLGVBQWUsS0FBSyxVQUFVLEtBQUssZ0JBQWdCLEtBQUssSUFBSSxJQUFJLFVBQVU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGVBQWUsS0FBSyxNQUFNLFNBQVMsRUFBRTtBQUMzQyxJQUFJO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFfcG9zdF9zY2FyY2l0eS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvZ2VuZXJhdGVDcmVhdGVCb2R5LmpzPzJjNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBjcmVhdGVQYXR0ZXJuQnVpbGRlciA9IHJlcXVpcmUoJy4vY3JlYXRlUGF0dGVybkJ1aWxkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZUNyZWF0ZUJvZHlGdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlQ3JlYXRlQm9keUZ1bmN0aW9uQm9keSA9IGdlbmVyYXRlQ3JlYXRlQm9keUZ1bmN0aW9uQm9keTtcblxuLy8gSW5saW5lVHJhbnNmb3JtOiBnZXRWZWN0b3JDb2RlXG5tb2R1bGUuZXhwb3J0cy5nZXRWZWN0b3JDb2RlID0gZ2V0VmVjdG9yQ29kZTtcbi8vIElubGluZVRyYW5zZm9ybTogZ2V0Qm9keUNvZGVcbm1vZHVsZS5leHBvcnRzLmdldEJvZHlDb2RlID0gZ2V0Qm9keUNvZGU7XG4vLyBJbmxpbmVUcmFuc2Zvcm1FeHBvcnQ6IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7IHJldHVybiBCb2R5OyB9XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3JlYXRlQm9keUZ1bmN0aW9uKGRpbWVuc2lvbiwgZGVidWdTZXR0ZXJzKSB7XG4gIGxldCBjb2RlID0gZ2VuZXJhdGVDcmVhdGVCb2R5RnVuY3Rpb25Cb2R5KGRpbWVuc2lvbiwgZGVidWdTZXR0ZXJzKTtcbiAgbGV0IHtCb2R5fSA9IChuZXcgRnVuY3Rpb24oY29kZSkpKCk7XG4gIHJldHVybiBCb2R5O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNyZWF0ZUJvZHlGdW5jdGlvbkJvZHkoZGltZW5zaW9uLCBkZWJ1Z1NldHRlcnMpIHtcbiAgbGV0IGNvZGUgPSBgXG4ke2dldFZlY3RvckNvZGUoZGltZW5zaW9uLCBkZWJ1Z1NldHRlcnMpfVxuJHtnZXRCb2R5Q29kZShkaW1lbnNpb24sIGRlYnVnU2V0dGVycyl9XG5yZXR1cm4ge0JvZHk6IEJvZHksIFZlY3RvcjogVmVjdG9yfTtcbmA7XG4gIHJldHVybiBjb2RlO1xufVxuXG5mdW5jdGlvbiBnZXRCb2R5Q29kZShkaW1lbnNpb24pIHtcbiAgbGV0IHBhdHRlcm4gPSBjcmVhdGVQYXR0ZXJuQnVpbGRlcihkaW1lbnNpb24pO1xuICBsZXQgdmFyaWFibGVMaXN0ID0gcGF0dGVybigne3Zhcn0nLCB7am9pbjogJywgJ30pO1xuICByZXR1cm4gYFxuZnVuY3Rpb24gQm9keSgke3ZhcmlhYmxlTGlzdH0pIHtcbiAgdGhpcy5pc1Bpbm5lZCA9IGZhbHNlO1xuICB0aGlzLnBvcyA9IG5ldyBWZWN0b3IoJHt2YXJpYWJsZUxpc3R9KTtcbiAgdGhpcy5mb3JjZSA9IG5ldyBWZWN0b3IoKTtcbiAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWN0b3IoKTtcbiAgdGhpcy5tYXNzID0gMTtcblxuICB0aGlzLnNwcmluZ0NvdW50ID0gMDtcbiAgdGhpcy5zcHJpbmdMZW5ndGggPSAwO1xufVxuXG5Cb2R5LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmZvcmNlLnJlc2V0KCk7XG4gIHRoaXMuc3ByaW5nQ291bnQgPSAwO1xuICB0aGlzLnNwcmluZ0xlbmd0aCA9IDA7XG59XG5cbkJvZHkucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gKCR7dmFyaWFibGVMaXN0fSkge1xuICAke3BhdHRlcm4oJ3RoaXMucG9zLnt2YXJ9ID0ge3Zhcn0gfHwgMDsnLCB7aW5kZW50OiAyfSl9XG59O2A7XG59XG5cbmZ1bmN0aW9uIGdldFZlY3RvckNvZGUoZGltZW5zaW9uLCBkZWJ1Z1NldHRlcnMpIHtcbiAgbGV0IHBhdHRlcm4gPSBjcmVhdGVQYXR0ZXJuQnVpbGRlcihkaW1lbnNpb24pO1xuICBsZXQgc2V0dGVycyA9ICcnO1xuICBpZiAoZGVidWdTZXR0ZXJzKSB7XG4gICAgc2V0dGVycyA9IGAke3BhdHRlcm4oXCJcXG5cXFxuICAgdmFyIHZ7dmFyfTtcXG5cXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd7dmFyfScsIHtcXG5cXFxuICBzZXQ6IGZ1bmN0aW9uKHYpIHsgXFxuXFxcbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh2KSkgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IG5vbi1udW1iZXJzIHRvIHt2YXJ9Jyk7XFxuXFxcbiAgICB2e3Zhcn0gPSB2OyBcXG5cXFxuICB9LFxcblxcXG4gIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB2e3Zhcn07IH1cXG5cXFxufSk7XCIpfWA7XG4gIH1cblxuICBsZXQgdmFyaWFibGVMaXN0ID0gcGF0dGVybigne3Zhcn0nLCB7am9pbjogJywgJ30pO1xuICByZXR1cm4gYGZ1bmN0aW9uIFZlY3Rvcigke3ZhcmlhYmxlTGlzdH0pIHtcbiAgJHtzZXR0ZXJzfVxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gY291bGQgYmUgYW5vdGhlciB2ZWN0b3JcbiAgICAgIGxldCB2ID0gYXJndW1lbnRzWzBdO1xuICAgICAgJHtwYXR0ZXJuKCdpZiAoIU51bWJlci5pc0Zpbml0ZSh2Lnt2YXJ9KSkgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgdmFsdWUgaXMgbm90IGEgZmluaXRlIG51bWJlciBhdCBWZWN0b3IgY29uc3RydWN0b3IgKHt2YXJ9KVwiKTsnLCB7aW5kZW50OiA0fSl9XG4gICAgICAke3BhdHRlcm4oJ3RoaXMue3Zhcn0gPSB2Lnt2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cbiAgICB9IGVsc2Uge1xuICAgICAgJHtwYXR0ZXJuKCd0aGlzLnt2YXJ9ID0gdHlwZW9mIHt2YXJ9ID09PSBcIm51bWJlclwiID8ge3Zhcn0gOiAwOycsIHtpbmRlbnQ6IDR9KX1cbiAgICB9XG4gIH1cbiAgXG4gIFZlY3Rvci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgJHtwYXR0ZXJuKCd0aGlzLnt2YXJ9ID0gJywge2pvaW46ICcnfSl9MDtcbiAgfTtgO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js ***!
  \***********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateCreateDragForceFunction;\nmodule.exports.generateCreateDragForceFunctionBody = generateCreateDragForceFunctionBody;\n\nfunction generateCreateDragForceFunction(dimension) {\n  let code = generateCreateDragForceFunctionBody(dimension);\n  return new Function('options', code);\n}\n\nfunction generateCreateDragForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.dragCoefficient)) throw new Error('dragCoefficient is not a finite number');\n\n  return {\n    update: function(body) {\n      ${pattern('body.force.{var} -= options.dragCoefficient * body.velocity.{var};', {indent: 6})}\n    }\n  };\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlRHJhZ0ZvcmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QixtQkFBTyxDQUFDLDhKQUF3Qjs7QUFFN0Q7QUFDQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRLHFCQUFxQixLQUFLLDRDQUE0QyxLQUFLLElBQUksVUFBVTtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hX3Bvc3Rfc2NhcmNpdHkvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlRHJhZ0ZvcmNlLmpzPzAwYmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JlYXRlUGF0dGVybkJ1aWxkZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVBhdHRlcm5CdWlsZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVDcmVhdGVEcmFnRm9yY2VGdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlQ3JlYXRlRHJhZ0ZvcmNlRnVuY3Rpb25Cb2R5ID0gZ2VuZXJhdGVDcmVhdGVEcmFnRm9yY2VGdW5jdGlvbkJvZHk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3JlYXRlRHJhZ0ZvcmNlRnVuY3Rpb24oZGltZW5zaW9uKSB7XG4gIGxldCBjb2RlID0gZ2VuZXJhdGVDcmVhdGVEcmFnRm9yY2VGdW5jdGlvbkJvZHkoZGltZW5zaW9uKTtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbignb3B0aW9ucycsIGNvZGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNyZWF0ZURyYWdGb3JjZUZ1bmN0aW9uQm9keShkaW1lbnNpb24pIHtcbiAgbGV0IHBhdHRlcm4gPSBjcmVhdGVQYXR0ZXJuQnVpbGRlcihkaW1lbnNpb24pO1xuICBsZXQgY29kZSA9IGBcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUob3B0aW9ucy5kcmFnQ29lZmZpY2llbnQpKSB0aHJvdyBuZXcgRXJyb3IoJ2RyYWdDb2VmZmljaWVudCBpcyBub3QgYSBmaW5pdGUgbnVtYmVyJyk7XG5cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICR7cGF0dGVybignYm9keS5mb3JjZS57dmFyfSAtPSBvcHRpb25zLmRyYWdDb2VmZmljaWVudCAqIGJvZHkudmVsb2NpdHkue3Zhcn07Jywge2luZGVudDogNn0pfVxuICAgIH1cbiAgfTtcbmA7XG4gIHJldHVybiBjb2RlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js ***!
  \*************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateCreateSpringForceFunction;\nmodule.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;\n\nfunction generateCreateSpringForceFunction(dimension) {\n  let code = generateCreateSpringForceFunctionBody(dimension);\n  return new Function('options', 'random', code);\n}\n\nfunction generateCreateSpringForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from;\n      var body2 = spring.to;\n      var length = spring.length < 0 ? options.springLength : spring.length;\n      ${pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {indent: 6})}\n      var r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n      if (r === 0) {\n        ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n      }\n\n      var d = r - length;\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      ${pattern('body1.force.{var} += coefficient * d{var}', {indent: 6})};\n      body1.springCount += 1;\n      body1.springLength += r;\n\n      ${pattern('body2.force.{var} -= coefficient * d{var}', {indent: 6})};\n      body2.springCount += 1;\n      body2.springLength += r;\n    }\n  };\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCOztBQUU3RDtBQUNBLG9EQUFvRDs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxlQUFlLEtBQUssYUFBYSxLQUFLLGFBQWEsS0FBSyxJQUFJLFVBQVU7QUFDOUUsMEJBQTBCLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxZQUFZLEVBQUU7O0FBRXBFO0FBQ0EsVUFBVSxXQUFXLEtBQUssbUNBQW1DLElBQUksVUFBVTtBQUMzRSx3QkFBd0IsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLFlBQVksRUFBRTtBQUNsRTs7QUFFQTtBQUNBOztBQUVBLFFBQVEsc0JBQXNCLEtBQUssbUJBQW1CLElBQUksSUFBSSxVQUFVO0FBQ3hFO0FBQ0E7O0FBRUEsUUFBUSxzQkFBc0IsS0FBSyxtQkFBbUIsSUFBSSxJQUFJLFVBQVU7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFfcG9zdF9zY2FyY2l0eS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvZ2VuZXJhdGVDcmVhdGVTcHJpbmdGb3JjZS5qcz84ZGQ1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZVBhdHRlcm5CdWlsZGVyID0gcmVxdWlyZSgnLi9jcmVhdGVQYXR0ZXJuQnVpbGRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2VGdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2VGdW5jdGlvbkJvZHkgPSBnZW5lcmF0ZUNyZWF0ZVNwcmluZ0ZvcmNlRnVuY3Rpb25Cb2R5O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNyZWF0ZVNwcmluZ0ZvcmNlRnVuY3Rpb24oZGltZW5zaW9uKSB7XG4gIGxldCBjb2RlID0gZ2VuZXJhdGVDcmVhdGVTcHJpbmdGb3JjZUZ1bmN0aW9uQm9keShkaW1lbnNpb24pO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdvcHRpb25zJywgJ3JhbmRvbScsIGNvZGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNyZWF0ZVNwcmluZ0ZvcmNlRnVuY3Rpb25Cb2R5KGRpbWVuc2lvbikge1xuICBsZXQgcGF0dGVybiA9IGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbik7XG4gIGxldCBjb2RlID0gYFxuICBpZiAoIU51bWJlci5pc0Zpbml0ZShvcHRpb25zLnNwcmluZ0NvZWZmaWNpZW50KSkgdGhyb3cgbmV3IEVycm9yKCdTcHJpbmcgY29lZmZpY2llbnQgaXMgbm90IGEgbnVtYmVyJyk7XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKG9wdGlvbnMuc3ByaW5nTGVuZ3RoKSkgdGhyb3cgbmV3IEVycm9yKCdTcHJpbmcgbGVuZ3RoIGlzIG5vdCBhIG51bWJlcicpO1xuXG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBmb3JjZXMgYWN0aW5nIG9uIGEgc3ByaW5nXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoc3ByaW5nKSB7XG4gICAgICB2YXIgYm9keTEgPSBzcHJpbmcuZnJvbTtcbiAgICAgIHZhciBib2R5MiA9IHNwcmluZy50bztcbiAgICAgIHZhciBsZW5ndGggPSBzcHJpbmcubGVuZ3RoIDwgMCA/IG9wdGlvbnMuc3ByaW5nTGVuZ3RoIDogc3ByaW5nLmxlbmd0aDtcbiAgICAgICR7cGF0dGVybigndmFyIGR7dmFyfSA9IGJvZHkyLnBvcy57dmFyfSAtIGJvZHkxLnBvcy57dmFyfTsnLCB7aW5kZW50OiA2fSl9XG4gICAgICB2YXIgciA9IE1hdGguc3FydCgke3BhdHRlcm4oJ2R7dmFyfSAqIGR7dmFyfScsIHtqb2luOiAnICsgJ30pfSk7XG5cbiAgICAgIGlmIChyID09PSAwKSB7XG4gICAgICAgICR7cGF0dGVybignZHt2YXJ9ID0gKHJhbmRvbS5uZXh0RG91YmxlKCkgLSAwLjUpIC8gNTA7Jywge2luZGVudDogOH0pfVxuICAgICAgICByID0gTWF0aC5zcXJ0KCR7cGF0dGVybignZHt2YXJ9ICogZHt2YXJ9Jywge2pvaW46ICcgKyAnfSl9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGQgPSByIC0gbGVuZ3RoO1xuICAgICAgdmFyIGNvZWZmaWNpZW50ID0gKChzcHJpbmcuY29lZmZpY2llbnQgPiAwKSA/IHNwcmluZy5jb2VmZmljaWVudCA6IG9wdGlvbnMuc3ByaW5nQ29lZmZpY2llbnQpICogZCAvIHI7XG5cbiAgICAgICR7cGF0dGVybignYm9keTEuZm9yY2Uue3Zhcn0gKz0gY29lZmZpY2llbnQgKiBke3Zhcn0nLCB7aW5kZW50OiA2fSl9O1xuICAgICAgYm9keTEuc3ByaW5nQ291bnQgKz0gMTtcbiAgICAgIGJvZHkxLnNwcmluZ0xlbmd0aCArPSByO1xuXG4gICAgICAke3BhdHRlcm4oJ2JvZHkyLmZvcmNlLnt2YXJ9IC09IGNvZWZmaWNpZW50ICogZHt2YXJ9Jywge2luZGVudDogNn0pfTtcbiAgICAgIGJvZHkyLnNwcmluZ0NvdW50ICs9IDE7XG4gICAgICBib2R5Mi5zcHJpbmdMZW5ndGggKz0gcjtcbiAgICB9XG4gIH07XG5gO1xuICByZXR1cm4gY29kZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js ***!
  \******************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateIntegratorFunction;\nmodule.exports.generateIntegratorFunctionBody = generateIntegratorFunctionBody;\n\nfunction generateIntegratorFunction(dimension) {\n  let code = generateIntegratorFunctionBody(dimension);\n  return new Function('bodies', 'timeStep', 'adaptiveTimeStepWeight', code);\n}\n\nfunction generateIntegratorFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  var length = bodies.length;\n  if (length === 0) return 0;\n\n  ${pattern('var d{var} = 0, t{var} = 0;', {indent: 2})}\n\n  for (var i = 0; i < length; ++i) {\n    var body = bodies[i];\n    if (body.isPinned) continue;\n\n    if (adaptiveTimeStepWeight && body.springCount) {\n      timeStep = (adaptiveTimeStepWeight * body.springLength/body.springCount);\n    }\n\n    var coeff = timeStep / body.mass;\n\n    ${pattern('body.velocity.{var} += coeff * body.force.{var};', {indent: 4})}\n    ${pattern('var v{var} = body.velocity.{var};', {indent: 4})}\n    var v = Math.sqrt(${pattern('v{var} * v{var}', {join: ' + '})});\n\n    if (v > 1) {\n      // We normalize it so that we move within timeStep range. \n      // for the case when v <= 1 - we let velocity to fade out.\n      ${pattern('body.velocity.{var} = v{var} / v;', {indent: 6})}\n    }\n\n    ${pattern('d{var} = timeStep * body.velocity.{var};', {indent: 4})}\n\n    ${pattern('body.pos.{var} += d{var};', {indent: 4})}\n\n    ${pattern('t{var} += Math.abs(d{var});', {indent: 4})}\n  }\n\n  return (${pattern('t{var} * t{var}', {join: ' + '})})/length;\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlSW50ZWdyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkIsbUJBQU8sQ0FBQyw4SkFBd0I7O0FBRTdEO0FBQ0EsNkNBQTZDOztBQUU3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksZUFBZSxLQUFLLE9BQU8sS0FBSyxJQUFJLElBQUksVUFBVTs7QUFFdEQsa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTSx3QkFBd0IsS0FBSyx1QkFBdUIsS0FBSyxJQUFJLFVBQVU7QUFDN0UsTUFBTSxlQUFlLEtBQUssaUJBQWlCLEtBQUssSUFBSSxVQUFVO0FBQzlELHdCQUF3QixXQUFXLEtBQUssSUFBSSxJQUFJLElBQUksWUFBWSxFQUFFOztBQUVsRTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHdCQUF3QixLQUFLLElBQUksS0FBSyxJQUFJLElBQUksVUFBVTtBQUNoRTs7QUFFQSxNQUFNLFdBQVcsS0FBSyw0QkFBNEIsS0FBSyxJQUFJLFVBQVU7O0FBRXJFLE1BQU0sbUJBQW1CLEtBQUssS0FBSyxLQUFLLElBQUksVUFBVTs7QUFFdEQsTUFBTSxXQUFXLEtBQUssY0FBYyxJQUFJLEVBQUUsSUFBSSxVQUFVO0FBQ3hEOztBQUVBLFlBQVksV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLFlBQVksRUFBRTtBQUN0RDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFfcG9zdF9zY2FyY2l0eS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvZ2VuZXJhdGVJbnRlZ3JhdG9yLmpzP2NiZTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JlYXRlUGF0dGVybkJ1aWxkZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVBhdHRlcm5CdWlsZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVJbnRlZ3JhdG9yRnVuY3Rpb247XG5tb2R1bGUuZXhwb3J0cy5nZW5lcmF0ZUludGVncmF0b3JGdW5jdGlvbkJvZHkgPSBnZW5lcmF0ZUludGVncmF0b3JGdW5jdGlvbkJvZHk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSW50ZWdyYXRvckZ1bmN0aW9uKGRpbWVuc2lvbikge1xuICBsZXQgY29kZSA9IGdlbmVyYXRlSW50ZWdyYXRvckZ1bmN0aW9uQm9keShkaW1lbnNpb24pO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdib2RpZXMnLCAndGltZVN0ZXAnLCAnYWRhcHRpdmVUaW1lU3RlcFdlaWdodCcsIGNvZGUpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUludGVncmF0b3JGdW5jdGlvbkJvZHkoZGltZW5zaW9uKSB7XG4gIGxldCBwYXR0ZXJuID0gY3JlYXRlUGF0dGVybkJ1aWxkZXIoZGltZW5zaW9uKTtcbiAgbGV0IGNvZGUgPSBgXG4gIHZhciBsZW5ndGggPSBib2RpZXMubGVuZ3RoO1xuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gMDtcblxuICAke3BhdHRlcm4oJ3ZhciBke3Zhcn0gPSAwLCB0e3Zhcn0gPSAwOycsIHtpbmRlbnQ6IDJ9KX1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG4gICAgaWYgKGJvZHkuaXNQaW5uZWQpIGNvbnRpbnVlO1xuXG4gICAgaWYgKGFkYXB0aXZlVGltZVN0ZXBXZWlnaHQgJiYgYm9keS5zcHJpbmdDb3VudCkge1xuICAgICAgdGltZVN0ZXAgPSAoYWRhcHRpdmVUaW1lU3RlcFdlaWdodCAqIGJvZHkuc3ByaW5nTGVuZ3RoL2JvZHkuc3ByaW5nQ291bnQpO1xuICAgIH1cblxuICAgIHZhciBjb2VmZiA9IHRpbWVTdGVwIC8gYm9keS5tYXNzO1xuXG4gICAgJHtwYXR0ZXJuKCdib2R5LnZlbG9jaXR5Lnt2YXJ9ICs9IGNvZWZmICogYm9keS5mb3JjZS57dmFyfTsnLCB7aW5kZW50OiA0fSl9XG4gICAgJHtwYXR0ZXJuKCd2YXIgdnt2YXJ9ID0gYm9keS52ZWxvY2l0eS57dmFyfTsnLCB7aW5kZW50OiA0fSl9XG4gICAgdmFyIHYgPSBNYXRoLnNxcnQoJHtwYXR0ZXJuKCd2e3Zhcn0gKiB2e3Zhcn0nLCB7am9pbjogJyArICd9KX0pO1xuXG4gICAgaWYgKHYgPiAxKSB7XG4gICAgICAvLyBXZSBub3JtYWxpemUgaXQgc28gdGhhdCB3ZSBtb3ZlIHdpdGhpbiB0aW1lU3RlcCByYW5nZS4gXG4gICAgICAvLyBmb3IgdGhlIGNhc2Ugd2hlbiB2IDw9IDEgLSB3ZSBsZXQgdmVsb2NpdHkgdG8gZmFkZSBvdXQuXG4gICAgICAke3BhdHRlcm4oJ2JvZHkudmVsb2NpdHkue3Zhcn0gPSB2e3Zhcn0gLyB2OycsIHtpbmRlbnQ6IDZ9KX1cbiAgICB9XG5cbiAgICAke3BhdHRlcm4oJ2R7dmFyfSA9IHRpbWVTdGVwICogYm9keS52ZWxvY2l0eS57dmFyfTsnLCB7aW5kZW50OiA0fSl9XG5cbiAgICAke3BhdHRlcm4oJ2JvZHkucG9zLnt2YXJ9ICs9IGR7dmFyfTsnLCB7aW5kZW50OiA0fSl9XG5cbiAgICAke3BhdHRlcm4oJ3R7dmFyfSArPSBNYXRoLmFicyhke3Zhcn0pOycsIHtpbmRlbnQ6IDR9KX1cbiAgfVxuXG4gIHJldHVybiAoJHtwYXR0ZXJuKCd0e3Zhcn0gKiB0e3Zhcn0nLCB7am9pbjogJyArICd9KX0pL2xlbmd0aDtcbmA7XG4gIHJldHVybiBjb2RlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js ***!
  \****************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\nconst getVariableName = __webpack_require__(/*! ./getVariableName */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js\");\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\n// These exports are for InlineTransform tool.\n// InlineTransform: getInsertStackCode\nmodule.exports.getInsertStackCode = getInsertStackCode;\n// InlineTransform: getQuadNodeCode\nmodule.exports.getQuadNodeCode = getQuadNodeCode;\n// InlineTransform: isSamePosition\nmodule.exports.isSamePosition = isSamePosition;\n// InlineTransform: getChildBodyCode\nmodule.exports.getChildBodyCode = getChildBodyCode;\n// InlineTransform: setChildBodyCode\nmodule.exports.setChildBodyCode = setChildBodyCode;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return (new Function(code))();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n${isSamePosition(dimension)}\n${getChildBodyCode(dimension)}\n${setChildBodyCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {indent: 4})}\n    var r; \n    ${pattern('var f{var} = 0;', {indent: 4})}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {indent: 8})}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n        // If s / r < θ, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {indent: 10})}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {indent: 4})}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {indent: 8})}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {indent: 10})}\n          ${pattern('child.max_{var} = max_{var};', {indent: 10})}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\nreturn createQuadTree;\n\n`;\n  return code;\n\n\n  function assignInsertionQuadIndex(indentCount) {\n    let insertionCode = [];\n    let indent = Array(indentCount + 1).join(' ');\n    for (let i = 0; i < dimension; ++i) {\n      insertionCode.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`);\n      insertionCode.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      insertionCode.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      insertionCode.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      insertionCode.push(indent + `}`);\n    }\n    return insertionCode.join('\\n');\n    // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let recursiveCode = [];\n    for (let i = 0; i < quadCount; ++i) {\n      recursiveCode.push(indent + `if (node.quad${i}) {`);\n      recursiveCode.push(indent + `  queue[pushIdx] = node.quad${i};`);\n      recursiveCode.push(indent + `  queueLength += 1;`);\n      recursiveCode.push(indent + `  pushIdx += 1;`);\n      recursiveCode.push(indent + `}`);\n    }\n    return recursiveCode.join('\\n');\n    // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction isSamePosition(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  return `\n  function isSamePosition(point1, point2) {\n    ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}\n  \n    return ${pattern('d{var} < 1e-8', {join: ' && '})};\n  }  \n`;\n}\n\nfunction setChildBodyCode(dimension) {\n  var quadCount = Math.pow(2, dimension);\n  return `\nfunction setChild(node, idx, child) {\n  ${setChildBody()}\n}`;\n  function setChildBody() {\n    let childBody = [];\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = (i === 0) ? '  ' : '  else ';\n      childBody.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n}\n\nfunction getChildBodyCode(dimension) {\n  return `function getChild(node, idx) {\n${getChildBody()}\n  return null;\n}`;\n\n  function getChildBody() {\n    let childBody = [];\n    let quadCount = Math.pow(2, dimension);\n    for (let i = 0; i < quadCount; ++i) {\n      childBody.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n}\n\nfunction getQuadNodeCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n  var quadNodeCode = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {indent: 2})}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {indent: 2})}\n  ${pattern('this.max_{var} = 0;', {indent: 2})}\n}\n`;\n  return quadNodeCode;\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js ***!
  \***************************************************************************************************************************/
/***/ ((module) => {

eval("module.exports = function getVariableName(index) {\n  if (index === 0) return 'x';\n  if (index === 1) return 'y';\n  if (index === 2) return 'z';\n  return 'c' + (index + 1);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dldFZhcmlhYmxlTmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFfcG9zdF9zY2FyY2l0eS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvZ2V0VmFyaWFibGVOYW1lLmpzPzViNzUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRWYXJpYWJsZU5hbWUoaW5kZXgpIHtcbiAgaWYgKGluZGV4ID09PSAwKSByZXR1cm4gJ3gnO1xuICBpZiAoaW5kZXggPT09IDEpIHJldHVybiAneSc7XG4gIGlmIChpbmRleCA9PT0gMikgcmV0dXJuICd6JztcbiAgcmV0dXJuICdjJyArIChpbmRleCArIDEpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = __webpack_require__(/*! ./codeGenerators/generateCreateBody */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js\");\nvar generateQuadTreeFunction = __webpack_require__(/*! ./codeGenerators/generateQuadTree */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js\");\nvar generateBoundsFunction = __webpack_require__(/*! ./codeGenerators/generateBounds */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js\");\nvar generateCreateDragForceFunction = __webpack_require__(/*! ./codeGenerators/generateCreateDragForce */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js\");\nvar generateCreateSpringForceFunction = __webpack_require__(/*! ./codeGenerators/generateCreateSpringForce */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js\");\nvar generateIntegratorFunction = __webpack_require__(/*! ./codeGenerators/generateIntegrator */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js\");\n\nvar dimensionalCache = {};\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = __webpack_require__(/*! ./spring */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js\");\n  var merge = __webpack_require__(/*! ngraph.merge */ \"(ssr)/./node_modules/.pnpm/ngraph.merge@1.0.0/node_modules/ngraph.merge/index.js\");\n  var eventify = __webpack_require__(/*! ngraph.events */ \"(ssr)/./node_modules/.pnpm/ngraph.events@1.2.2/node_modules/ngraph.events/index.js\");\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 10,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoefficient: 0.8, \n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -12,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoefficient: 0.9, // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 0.5,\n\n      /**\n       * Adaptive time step uses average spring length to compute actual time step:\n       * See: https://twitter.com/anvaka/status/1293067160755957760\n       */\n      adaptiveTimeStepWeight: 0,\n\n      /**\n       * This parameter defines number of dimensions of the space where simulation\n       * is performed. \n       */\n      dimensions: 2,\n\n      /**\n       * In debug mode more checks are performed, this will help you catch errors\n       * quickly, however for production build it is recommended to turn off this flag\n       * to speed up computation.\n       */\n      debug: false\n  });\n\n  var factory = dimensionalCache[settings.dimensions];\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions),\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n  var createBody = pos => new Body(pos);\n\n  var random = (__webpack_require__(/*! ngraph.random */ \"(ssr)/./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js\").random)(42);\n  var bodies = []; // Bodies in this simulation.\n  var springs = []; // Springs in this simulation.\n\n  var quadTree = createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n\n  var totalMovement = 0; // how much movement we made on last step\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n \n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n  \n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n    \n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox, \n    getBoundingBox: getBoundingBox, \n\n    invalidateBBox: function () {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n\n    // TODO: Move the force specific stuff to force\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    },\n\n    /**\n     * Returns pseudo-random number generator instance.\n     */\n    random: random\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction);\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName));\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n    forceMap.delete(forceName);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function nbodyForce(/* iterationUmber */) {\n    if (bodies.length === 0) return;\n\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n    while (i--) {\n      var body = bodies[i];\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n\n}\n\nfunction expose(settings, target) {\n  for (var key in settings) {\n    augment(settings, target, key);\n  }\n}\n\nfunction augment(source, target, key) {\n  if (!source.hasOwnProperty(key)) return;\n  if (typeof target[key] === 'function') {\n    // this accessor is already defined. Ignore it\n    return;\n  }\n  var sourceIsNumber = Number.isFinite(source[key]);\n\n  if (sourceIsNumber) {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    };\n  } else {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    };\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js ***!
  \***************************************************************************************************/
/***/ ((module) => {

eval("module.exports = Spring;\n\n/**\n * Represents a physical spring. Spring connects two bodies, has rest length\n * stiffness coefficient and optional weight\n */\nfunction Spring(fromBody, toBody, length, springCoefficient) {\n    this.from = fromBody;\n    this.to = toBody;\n    this.length = length;\n    this.coefficient = springCoefficient;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL3NwcmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYV9wb3N0X3NjYXJjaXR5Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5mb3JjZWxheW91dEAzLjMuMS9ub2RlX21vZHVsZXMvbmdyYXBoLmZvcmNlbGF5b3V0L2xpYi9zcHJpbmcuanM/MGViOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFNwcmluZztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcGh5c2ljYWwgc3ByaW5nLiBTcHJpbmcgY29ubmVjdHMgdHdvIGJvZGllcywgaGFzIHJlc3QgbGVuZ3RoXG4gKiBzdGlmZm5lc3MgY29lZmZpY2llbnQgYW5kIG9wdGlvbmFsIHdlaWdodFxuICovXG5mdW5jdGlvbiBTcHJpbmcoZnJvbUJvZHksIHRvQm9keSwgbGVuZ3RoLCBzcHJpbmdDb2VmZmljaWVudCkge1xuICAgIHRoaXMuZnJvbSA9IGZyb21Cb2R5O1xuICAgIHRoaXMudG8gPSB0b0JvZHk7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgdGhpcy5jb2VmZmljaWVudCA9IHNwcmluZ0NvZWZmaWNpZW50O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js\n");

/***/ })

};
;