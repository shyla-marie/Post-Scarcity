/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ngraph.random@1.1.0";
exports.ids = ["vendor-chunks/ngraph.random@1.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("module.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random,\nmodule.exports.randomIterator = randomIterator\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());\n  return new Generator(seed)\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number from uniform distribution in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\n\n/**\n * Returns a random real number from a Gaussian distribution\n * with 0 as a mean, and 1 as standard deviation u ~ N(0,1)\n */\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r)/r);\n}\n\n/**\n * See https://twitter.com/anvaka/status/1296182534150135808\n */\nGenerator.prototype.levy = levy;\n\nfunction levy() {\n  var beta = 3 / 2;\n  var sigma = Math.pow(\n      gamma( 1 + beta ) * Math.sin(Math.PI * beta / 2) / \n        (gamma((1 + beta) / 2) * beta * Math.pow(2, (beta - 1) / 2)),\n      1/beta\n  );\n  return this.gaussian() * sigma / Math.pow(Math.abs(this.gaussian()), 1/beta);\n}\n\n// gamma function approximation\nfunction gamma(z) {\n  return Math.sqrt(2 * Math.PI / z) * Math.pow((1 / Math.E) * (z + 1 / (12 * z - 1 / (10 * z))), z);\n}\n\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;\n  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;\n  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;\n  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;\n  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLnJhbmRvbUAxLjEuMC9ub2RlX21vZHVsZXMvbmdyYXBoLnJhbmRvbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQiw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTztBQUN0QyxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLE9BQU87QUFDdEMsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFfcG9zdF9zY2FyY2l0eS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGgucmFuZG9tQDEuMS4wL25vZGVfbW9kdWxlcy9uZ3JhcGgucmFuZG9tL2luZGV4LmpzPzEwM2UiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByYW5kb207XG5cbi8vIFRPRE86IERlcHJlY2F0ZT9cbm1vZHVsZS5leHBvcnRzLnJhbmRvbSA9IHJhbmRvbSxcbm1vZHVsZS5leHBvcnRzLnJhbmRvbUl0ZXJhdG9yID0gcmFuZG9tSXRlcmF0b3JcblxuLyoqXG4gKiBDcmVhdGVzIHNlZWRlZCBQUk5HIHdpdGggdHdvIG1ldGhvZHM6XG4gKiAgIG5leHQoKSBhbmQgbmV4dERvdWJsZSgpXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbShpbnB1dFNlZWQpIHtcbiAgdmFyIHNlZWQgPSB0eXBlb2YgaW5wdXRTZWVkID09PSAnbnVtYmVyJyA/IGlucHV0U2VlZCA6ICgrbmV3IERhdGUoKSk7XG4gIHJldHVybiBuZXcgR2VuZXJhdG9yKHNlZWQpXG59XG5cbmZ1bmN0aW9uIEdlbmVyYXRvcihzZWVkKSB7XG4gIHRoaXMuc2VlZCA9IHNlZWQ7XG59XG5cbi8qKlxuICAqIEdlbmVyYXRlcyByYW5kb20gaW50ZWdlciBudW1iZXIgaW4gdGhlIHJhbmdlIGZyb20gMCAoaW5jbHVzaXZlKSB0byBtYXhWYWx1ZSAoZXhjbHVzaXZlKVxuICAqXG4gICogQHBhcmFtIG1heFZhbHVlIE51bWJlciBSRVFVSVJFRC4gT21pdHRpbmcgdGhpcyBudW1iZXIgd2lsbCByZXN1bHQgaW4gTmFOIHZhbHVlcyBmcm9tIFBSTkcuXG4gICovXG5HZW5lcmF0b3IucHJvdG90eXBlLm5leHQgPSBuZXh0O1xuXG4vKipcbiAgKiBHZW5lcmF0ZXMgcmFuZG9tIGRvdWJsZSBudW1iZXIgaW4gdGhlIHJhbmdlIGZyb20gMCAoaW5jbHVzaXZlKSB0byAxIChleGNsdXNpdmUpXG4gICogVGhpcyBmdW5jdGlvbiBpcyB0aGUgc2FtZSBhcyBNYXRoLnJhbmRvbSgpIChleGNlcHQgdGhhdCBpdCBjb3VsZCBiZSBzZWVkZWQpXG4gICovXG5HZW5lcmF0b3IucHJvdG90eXBlLm5leHREb3VibGUgPSBuZXh0RG91YmxlO1xuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gcmVhbCBudW1iZXIgZnJvbSB1bmlmb3JtIGRpc3RyaWJ1dGlvbiBpbiBbMCwgMSlcbiAqL1xuR2VuZXJhdG9yLnByb3RvdHlwZS51bmlmb3JtID0gbmV4dERvdWJsZTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIHJlYWwgbnVtYmVyIGZyb20gYSBHYXVzc2lhbiBkaXN0cmlidXRpb25cbiAqIHdpdGggMCBhcyBhIG1lYW4sIGFuZCAxIGFzIHN0YW5kYXJkIGRldmlhdGlvbiB1IH4gTigwLDEpXG4gKi9cbkdlbmVyYXRvci5wcm90b3R5cGUuZ2F1c3NpYW4gPSBnYXVzc2lhbjtcblxuZnVuY3Rpb24gZ2F1c3NpYW4oKSB7XG4gIC8vIHVzZSB0aGUgcG9sYXIgZm9ybSBvZiB0aGUgQm94LU11bGxlciB0cmFuc2Zvcm1cbiAgLy8gYmFzZWQgb24gaHR0cHM6Ly9pbnRyb2NzLmNzLnByaW5jZXRvbi5lZHUvamF2YS8yM3JlY3Vyc2lvbi9TdGRSYW5kb20uamF2YVxuICB2YXIgciwgeCwgeTtcbiAgZG8ge1xuICAgIHggPSB0aGlzLm5leHREb3VibGUoKSAqIDIgLSAxO1xuICAgIHkgPSB0aGlzLm5leHREb3VibGUoKSAqIDIgLSAxO1xuICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICB9IHdoaWxlIChyID49IDEgfHwgciA9PT0gMCk7XG5cbiAgcmV0dXJuIHggKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKS9yKTtcbn1cblxuLyoqXG4gKiBTZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9hbnZha2Evc3RhdHVzLzEyOTYxODI1MzQxNTAxMzU4MDhcbiAqL1xuR2VuZXJhdG9yLnByb3RvdHlwZS5sZXZ5ID0gbGV2eTtcblxuZnVuY3Rpb24gbGV2eSgpIHtcbiAgdmFyIGJldGEgPSAzIC8gMjtcbiAgdmFyIHNpZ21hID0gTWF0aC5wb3coXG4gICAgICBnYW1tYSggMSArIGJldGEgKSAqIE1hdGguc2luKE1hdGguUEkgKiBiZXRhIC8gMikgLyBcbiAgICAgICAgKGdhbW1hKCgxICsgYmV0YSkgLyAyKSAqIGJldGEgKiBNYXRoLnBvdygyLCAoYmV0YSAtIDEpIC8gMikpLFxuICAgICAgMS9iZXRhXG4gICk7XG4gIHJldHVybiB0aGlzLmdhdXNzaWFuKCkgKiBzaWdtYSAvIE1hdGgucG93KE1hdGguYWJzKHRoaXMuZ2F1c3NpYW4oKSksIDEvYmV0YSk7XG59XG5cbi8vIGdhbW1hIGZ1bmN0aW9uIGFwcHJveGltYXRpb25cbmZ1bmN0aW9uIGdhbW1hKHopIHtcbiAgcmV0dXJuIE1hdGguc3FydCgyICogTWF0aC5QSSAvIHopICogTWF0aC5wb3coKDEgLyBNYXRoLkUpICogKHogKyAxIC8gKDEyICogeiAtIDEgLyAoMTAgKiB6KSkpLCB6KTtcbn1cblxuZnVuY3Rpb24gbmV4dERvdWJsZSgpIHtcbiAgdmFyIHNlZWQgPSB0aGlzLnNlZWQ7XG4gIC8vIFJvYmVydCBKZW5raW5zJyAzMiBiaXQgaW50ZWdlciBoYXNoIGZ1bmN0aW9uLlxuICBzZWVkID0gKChzZWVkICsgMHg3ZWQ1NWQxNikgKyAoc2VlZCA8PCAxMikpICYgMHhmZmZmZmZmZjtcbiAgc2VlZCA9ICgoc2VlZCBeIDB4Yzc2MWMyM2MpIF4gKHNlZWQgPj4+IDE5KSkgJiAweGZmZmZmZmZmO1xuICBzZWVkID0gKChzZWVkICsgMHgxNjU2NjdiMSkgKyAoc2VlZCA8PCA1KSkgJiAweGZmZmZmZmZmO1xuICBzZWVkID0gKChzZWVkICsgMHhkM2EyNjQ2YykgXiAoc2VlZCA8PCA5KSkgJiAweGZmZmZmZmZmO1xuICBzZWVkID0gKChzZWVkICsgMHhmZDcwNDZjNSkgKyAoc2VlZCA8PCAzKSkgJiAweGZmZmZmZmZmO1xuICBzZWVkID0gKChzZWVkIF4gMHhiNTVhNGYwOSkgXiAoc2VlZCA+Pj4gMTYpKSAmIDB4ZmZmZmZmZmY7XG4gIHRoaXMuc2VlZCA9IHNlZWQ7XG4gIHJldHVybiAoc2VlZCAmIDB4ZmZmZmZmZikgLyAweDEwMDAwMDAwO1xufVxuXG5mdW5jdGlvbiBuZXh0KG1heFZhbHVlKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHRoaXMubmV4dERvdWJsZSgpICogbWF4VmFsdWUpO1xufVxuXG4vKlxuICogQ3JlYXRlcyBpdGVyYXRvciBvdmVyIGFycmF5LCB3aGljaCByZXR1cm5zIGl0ZW1zIG9mIGFycmF5IGluIHJhbmRvbSBvcmRlclxuICogVGltZSBjb21wbGV4aXR5IGlzIGd1YXJhbnRlZWQgdG8gYmUgTyhuKTtcbiAqL1xuZnVuY3Rpb24gcmFuZG9tSXRlcmF0b3IoYXJyYXksIGN1c3RvbVJhbmRvbSkge1xuICB2YXIgbG9jYWxSYW5kb20gPSBjdXN0b21SYW5kb20gfHwgcmFuZG9tKCk7XG4gIGlmICh0eXBlb2YgbG9jYWxSYW5kb20ubmV4dCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3VzdG9tUmFuZG9tIGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkIEFQSTogbmV4dCgpIGZ1bmN0aW9uIGlzIG1pc3NpbmcnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9yRWFjaDogZm9yRWFjaCxcblxuICAgIC8qKlxuICAgICAqIFNodWZmbGVzIGFycmF5IHJhbmRvbWx5LCBpbiBwbGFjZS5cbiAgICAgKi9cbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH07XG5cbiAgZnVuY3Rpb24gc2h1ZmZsZSgpIHtcbiAgICB2YXIgaSwgaiwgdDtcbiAgICBmb3IgKGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgLS1pKSB7XG4gICAgICBqID0gbG9jYWxSYW5kb20ubmV4dChpICsgMSk7IC8vIGkgaW5jbHVzaXZlXG4gICAgICB0ID0gYXJyYXlbal07XG4gICAgICBhcnJheVtqXSA9IGFycmF5W2ldO1xuICAgICAgYXJyYXlbaV0gPSB0O1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICB2YXIgaSwgaiwgdDtcbiAgICBmb3IgKGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgLS1pKSB7XG4gICAgICBqID0gbG9jYWxSYW5kb20ubmV4dChpICsgMSk7IC8vIGkgaW5jbHVzaXZlXG4gICAgICB0ID0gYXJyYXlbal07XG4gICAgICBhcnJheVtqXSA9IGFycmF5W2ldO1xuICAgICAgYXJyYXlbaV0gPSB0O1xuXG4gICAgICBjYWxsYmFjayh0KTtcbiAgICB9XG5cbiAgICBpZiAoYXJyYXkubGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhhcnJheVswXSk7XG4gICAgfVxuICB9XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js\n");

/***/ })

};
;